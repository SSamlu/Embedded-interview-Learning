
spi1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080033d0  080033d0  000133d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034b0  080034b0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080034b0  080034b0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034b0  080034b0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034b0  080034b0  000134b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034b4  080034b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080034b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000007c  08003534  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003534  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e2c  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017fe  00000000  00000000  00027ed1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000768  00000000  00000000  000296d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a0  00000000  00000000  00029e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b3a  00000000  00000000  0002a4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000067b0  00000000  00000000  00042012  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082f07  00000000  00000000  000487c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb6c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002374  00000000  00000000  000cb744  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	080033b8 	.word	0x080033b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	080033b8 	.word	0x080033b8

0800014c <HAL_SPI_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);
  if (hspi->Instance == SPI1) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a17      	ldr	r2, [pc, #92]	; (80001b8 <HAL_SPI_RxCpltCallback+0x6c>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d127      	bne.n	80001ae <HAL_SPI_RxCpltCallback+0x62>

	  rxBuffer[RX_Index] = spiSlaveRX;
 800015e:	4b17      	ldr	r3, [pc, #92]	; (80001bc <HAL_SPI_RxCpltCallback+0x70>)
 8000160:	781b      	ldrb	r3, [r3, #0]
 8000162:	461a      	mov	r2, r3
 8000164:	4b16      	ldr	r3, [pc, #88]	; (80001c0 <HAL_SPI_RxCpltCallback+0x74>)
 8000166:	7819      	ldrb	r1, [r3, #0]
 8000168:	4b16      	ldr	r3, [pc, #88]	; (80001c4 <HAL_SPI_RxCpltCallback+0x78>)
 800016a:	5499      	strb	r1, [r3, r2]
	  RX_Index++;
 800016c:	4b13      	ldr	r3, [pc, #76]	; (80001bc <HAL_SPI_RxCpltCallback+0x70>)
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	3301      	adds	r3, #1
 8000172:	b2da      	uxtb	r2, r3
 8000174:	4b11      	ldr	r3, [pc, #68]	; (80001bc <HAL_SPI_RxCpltCallback+0x70>)
 8000176:	701a      	strb	r2, [r3, #0]
	  if(RX_Index == sizeOfBuffer)
 8000178:	4b10      	ldr	r3, [pc, #64]	; (80001bc <HAL_SPI_RxCpltCallback+0x70>)
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	2b0a      	cmp	r3, #10
 800017e:	d111      	bne.n	80001a4 <HAL_SPI_RxCpltCallback+0x58>
	  	{
	  		RX_Index=0;
 8000180:	4b0e      	ldr	r3, [pc, #56]	; (80001bc <HAL_SPI_RxCpltCallback+0x70>)
 8000182:	2200      	movs	r2, #0
 8000184:	701a      	strb	r2, [r3, #0]
	  		uint8_t i=0;
 8000186:	2300      	movs	r3, #0
 8000188:	73fb      	strb	r3, [r7, #15]
	  		for(i=0;i<sizeOfBuffer;i++)
 800018a:	2300      	movs	r3, #0
 800018c:	73fb      	strb	r3, [r7, #15]
 800018e:	e006      	b.n	800019e <HAL_SPI_RxCpltCallback+0x52>
	  		{
	  			rxBuffer[i]=0;
 8000190:	7bfb      	ldrb	r3, [r7, #15]
 8000192:	4a0c      	ldr	r2, [pc, #48]	; (80001c4 <HAL_SPI_RxCpltCallback+0x78>)
 8000194:	2100      	movs	r1, #0
 8000196:	54d1      	strb	r1, [r2, r3]
	  		for(i=0;i<sizeOfBuffer;i++)
 8000198:	7bfb      	ldrb	r3, [r7, #15]
 800019a:	3301      	adds	r3, #1
 800019c:	73fb      	strb	r3, [r7, #15]
 800019e:	7bfb      	ldrb	r3, [r7, #15]
 80001a0:	2b09      	cmp	r3, #9
 80001a2:	d9f5      	bls.n	8000190 <HAL_SPI_RxCpltCallback+0x44>
	  		}
	  	}
	  HAL_SPI_Receive_IT(&hspi1, &spiSlaveRX, 1);
 80001a4:	2201      	movs	r2, #1
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <HAL_SPI_RxCpltCallback+0x74>)
 80001a8:	4807      	ldr	r0, [pc, #28]	; (80001c8 <HAL_SPI_RxCpltCallback+0x7c>)
 80001aa:	f001 fc49 	bl	8001a40 <HAL_SPI_Receive_IT>
  }
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80001ae:	bf00      	nop
 80001b0:	3710      	adds	r7, #16
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	40013000 	.word	0x40013000
 80001bc:	20000099 	.word	0x20000099
 80001c0:	20000098 	.word	0x20000098
 80001c4:	20000104 	.word	0x20000104
 80001c8:	2000011c 	.word	0x2000011c

080001cc <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
	UNUSED(hspi);
	if(hspi->Instance == SPI1) {
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a05      	ldr	r2, [pc, #20]	; (80001f0 <HAL_SPI_TxRxCpltCallback+0x24>)
 80001da:	4293      	cmp	r3, r2
 80001dc:	d104      	bne.n	80001e8 <HAL_SPI_TxRxCpltCallback+0x1c>
//			Tx_index = 0;
//			for(uint8_t i = 0; i < sizeOfBuffer; i++) {
//				txBuffer[i] = 0;
//			}
//		}
		HAL_SPI_Transmit_IT(&hspi1, spiSlaveTX, 1);
 80001de:	2201      	movs	r2, #1
 80001e0:	4904      	ldr	r1, [pc, #16]	; (80001f4 <HAL_SPI_TxRxCpltCallback+0x28>)
 80001e2:	4805      	ldr	r0, [pc, #20]	; (80001f8 <HAL_SPI_TxRxCpltCallback+0x2c>)
 80001e4:	f001 fba2 	bl	800192c <HAL_SPI_Transmit_IT>
	}
};
 80001e8:	bf00      	nop
 80001ea:	3708      	adds	r7, #8
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40013000 	.word	0x40013000
 80001f4:	20000000 	.word	0x20000000
 80001f8:	2000011c 	.word	0x2000011c

080001fc <digitalWirte>:
* 	  pinMode - uint8_t
* 	  value - uint8_t
* Output:
* 	  None
*/
void digitalWirte(uint8_t pinMode, uint8_t value) {
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	460a      	mov	r2, r1
 8000206:	71fb      	strb	r3, [r7, #7]
 8000208:	4613      	mov	r3, r2
 800020a:	71bb      	strb	r3, [r7, #6]
  	if(value == MODE_HIGH) GPIOA->BSRR = 1 << pinMode; //set to high level
 800020c:	79bb      	ldrb	r3, [r7, #6]
 800020e:	2b01      	cmp	r3, #1
 8000210:	d105      	bne.n	800021e <digitalWirte+0x22>
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	2201      	movs	r2, #1
 8000216:	409a      	lsls	r2, r3
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <digitalWirte+0x38>)
 800021a:	611a      	str	r2, [r3, #16]
  	else  GPIOA->BRR = 1 << pinMode; //Reset to low level
};
 800021c:	e004      	b.n	8000228 <digitalWirte+0x2c>
  	else  GPIOA->BRR = 1 << pinMode; //Reset to low level
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	2201      	movs	r2, #1
 8000222:	409a      	lsls	r2, r3
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <digitalWirte+0x38>)
 8000226:	615a      	str	r2, [r3, #20]
};
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	bc80      	pop	{r7}
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40010800 	.word	0x40010800

08000238 <SPIInit>:
* Input:
* 	  None
* Output:
* 	  None
*/
void SPIInit(){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  	digitalWirte(CLK, MODE_LOW);
 800023c:	2100      	movs	r1, #0
 800023e:	2008      	movs	r0, #8
 8000240:	f7ff ffdc 	bl	80001fc <digitalWirte>
  	digitalWirte(MOSI, MODE_LOW);
 8000244:	2100      	movs	r1, #0
 8000246:	200c      	movs	r0, #12
 8000248:	f7ff ffd8 	bl	80001fc <digitalWirte>
//  	digitalWirte(MISO, MODE_LOW);
  	digitalWirte(SELECT_SERIAL, MODE_HIGH);
 800024c:	2101      	movs	r1, #1
 800024e:	2009      	movs	r0, #9
 8000250:	f7ff ffd4 	bl	80001fc <digitalWirte>
};
 8000254:	bf00      	nop
 8000256:	bd80      	pop	{r7, pc}

08000258 <clockSPIGenerate>:
* Input:
* 	  None
* Output:
* 	  None
*/
 void clockSPIGenerate(){
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  	digitalWirte(CLK, MODE_HIGH);
 800025c:	2101      	movs	r1, #1
 800025e:	2008      	movs	r0, #8
 8000260:	f7ff ffcc 	bl	80001fc <digitalWirte>
  	HAL_Delay(100);
 8000264:	2064      	movs	r0, #100	; 0x64
 8000266:	f000 fbdb 	bl	8000a20 <HAL_Delay>
  	digitalWirte(CLK, MODE_LOW);
 800026a:	2100      	movs	r1, #0
 800026c:	2008      	movs	r0, #8
 800026e:	f7ff ffc5 	bl	80001fc <digitalWirte>
  	HAL_Delay(100);
 8000272:	2064      	movs	r0, #100	; 0x64
 8000274:	f000 fbd4 	bl	8000a20 <HAL_Delay>
};
 8000278:	bf00      	nop
 800027a:	bd80      	pop	{r7, pc}

0800027c <SPISlaveStatus>:
* Input:
* 	  mode - uint8_t
* Output:
* 	  None
*/
void SPISlaveStatus(uint8_t mode){
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	71fb      	strb	r3, [r7, #7]
	digitalWirte(SELECT_SERIAL, mode);
 8000286:	79fb      	ldrb	r3, [r7, #7]
 8000288:	4619      	mov	r1, r3
 800028a:	2009      	movs	r0, #9
 800028c:	f7ff ffb6 	bl	80001fc <digitalWirte>
};
 8000290:	bf00      	nop
 8000292:	3708      	adds	r7, #8
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}

08000298 <SPITransmitData>:
* Input:
* 	  data - uint8_t
* Output:
* 	  None
*/
void SPITransmitData(uint8_t data) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
  	uint8_t bit;
  	SPISlaveStatus(MODE_LOW);
 80002a2:	2000      	movs	r0, #0
 80002a4:	f7ff ffea 	bl	800027c <SPISlaveStatus>
  	for(bit = 0; bit < 8; bit++) {
 80002a8:	2300      	movs	r3, #0
 80002aa:	73fb      	strb	r3, [r7, #15]
 80002ac:	e00e      	b.n	80002cc <SPITransmitData+0x34>
  		digitalWirte(MOSI, (data & 0x80) ? MODE_HIGH : MODE_LOW);
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	09db      	lsrs	r3, r3, #7
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	4619      	mov	r1, r3
 80002b6:	200c      	movs	r0, #12
 80002b8:	f7ff ffa0 	bl	80001fc <digitalWirte>
  		clockSPIGenerate();
 80002bc:	f7ff ffcc 	bl	8000258 <clockSPIGenerate>
  		data <<= 1; //or data = data << 1;
 80002c0:	79fb      	ldrb	r3, [r7, #7]
 80002c2:	005b      	lsls	r3, r3, #1
 80002c4:	71fb      	strb	r3, [r7, #7]
  	for(bit = 0; bit < 8; bit++) {
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	3301      	adds	r3, #1
 80002ca:	73fb      	strb	r3, [r7, #15]
 80002cc:	7bfb      	ldrb	r3, [r7, #15]
 80002ce:	2b07      	cmp	r3, #7
 80002d0:	d9ed      	bls.n	80002ae <SPITransmitData+0x16>
  	}
  	SPISlaveStatus(MODE_HIGH);
 80002d2:	2001      	movs	r0, #1
 80002d4:	f7ff ffd2 	bl	800027c <SPISlaveStatus>
};
 80002d8:	bf00      	nop
 80002da:	3710      	adds	r7, #16
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e6:	f000 fb39 	bl	800095c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ea:	f000 f82b 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ee:	f000 f8cf 	bl	8000490 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002f2:	f000 f863 	bl	80003bc <MX_SPI1_Init>
  MX_SPI2_Init();
 80002f6:	f000 f895 	bl	8000424 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  SPIInit();
 80002fa:	f7ff ff9d 	bl	8000238 <SPIInit>
  clockSPIGenerate();
 80002fe:	f7ff ffab 	bl	8000258 <clockSPIGenerate>
//  SPITransmitData(spiMasterTX);
//  HAL_SPI_Transmit_IT(&hspi2, spiSlaveTX, 1);
//  SPIReceiveData();
  HAL_SPI_Receive_IT(&hspi1, &spiSlaveRX, 1);
 8000302:	2201      	movs	r2, #1
 8000304:	490c      	ldr	r1, [pc, #48]	; (8000338 <main+0x58>)
 8000306:	480d      	ldr	r0, [pc, #52]	; (800033c <main+0x5c>)
 8000308:	f001 fb9a 	bl	8001a40 <HAL_SPI_Receive_IT>

    while (1)
    {
    /* USER CODE END WHILE */
		#if 1
			 for(uint8_t i = 'a'; i < 'z'; i++) {
 800030c:	2361      	movs	r3, #97	; 0x61
 800030e:	71fb      	strb	r3, [r7, #7]
 8000310:	e00e      	b.n	8000330 <main+0x50>
				  SPITransmitData(i);
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ffbf 	bl	8000298 <SPITransmitData>
				  printf("data send from master to slave: %c\n", i);
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	4619      	mov	r1, r3
 800031e:	4808      	ldr	r0, [pc, #32]	; (8000340 <main+0x60>)
 8000320:	f002 f95c 	bl	80025dc <iprintf>
				  HAL_Delay(100);
 8000324:	2064      	movs	r0, #100	; 0x64
 8000326:	f000 fb7b 	bl	8000a20 <HAL_Delay>
			 for(uint8_t i = 'a'; i < 'z'; i++) {
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	3301      	adds	r3, #1
 800032e:	71fb      	strb	r3, [r7, #7]
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	2b79      	cmp	r3, #121	; 0x79
 8000334:	d9ed      	bls.n	8000312 <main+0x32>
 8000336:	e7e9      	b.n	800030c <main+0x2c>
 8000338:	20000098 	.word	0x20000098
 800033c:	2000011c 	.word	0x2000011c
 8000340:	080033d0 	.word	0x080033d0

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b090      	sub	sp, #64	; 0x40
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	f107 0318 	add.w	r3, r7, #24
 800034e:	2228      	movs	r2, #40	; 0x28
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f002 f93a 	bl	80025cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000366:	2302      	movs	r3, #2
 8000368:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036a:	2301      	movs	r3, #1
 800036c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036e:	2310      	movs	r3, #16
 8000370:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000372:	2300      	movs	r3, #0
 8000374:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000376:	f107 0318 	add.w	r3, r7, #24
 800037a:	4618      	mov	r0, r3
 800037c:	f000 fe68 	bl	8001050 <HAL_RCC_OscConfig>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000386:	f000 f8e7 	bl	8000558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038a:	230f      	movs	r3, #15
 800038c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800038e:	2300      	movs	r3, #0
 8000390:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2100      	movs	r1, #0
 80003a2:	4618      	mov	r0, r3
 80003a4:	f001 f8d4 	bl	8001550 <HAL_RCC_ClockConfig>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003ae:	f000 f8d3 	bl	8000558 <Error_Handler>
  }
}
 80003b2:	bf00      	nop
 80003b4:	3740      	adds	r7, #64	; 0x40
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
	...

080003bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003c0:	4b16      	ldr	r3, [pc, #88]	; (800041c <MX_SPI1_Init+0x60>)
 80003c2:	4a17      	ldr	r2, [pc, #92]	; (8000420 <MX_SPI1_Init+0x64>)
 80003c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80003c6:	4b15      	ldr	r3, [pc, #84]	; (800041c <MX_SPI1_Init+0x60>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003cc:	4b13      	ldr	r3, [pc, #76]	; (800041c <MX_SPI1_Init+0x60>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003d2:	4b12      	ldr	r3, [pc, #72]	; (800041c <MX_SPI1_Init+0x60>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003d8:	4b10      	ldr	r3, [pc, #64]	; (800041c <MX_SPI1_Init+0x60>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <MX_SPI1_Init+0x60>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80003e4:	4b0d      	ldr	r3, [pc, #52]	; (800041c <MX_SPI1_Init+0x60>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003ea:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_SPI1_Init+0x60>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003f0:	4b0a      	ldr	r3, [pc, #40]	; (800041c <MX_SPI1_Init+0x60>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_SPI1_Init+0x60>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003fc:	4b07      	ldr	r3, [pc, #28]	; (800041c <MX_SPI1_Init+0x60>)
 80003fe:	2200      	movs	r2, #0
 8000400:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000402:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_SPI1_Init+0x60>)
 8000404:	220a      	movs	r2, #10
 8000406:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000408:	4804      	ldr	r0, [pc, #16]	; (800041c <MX_SPI1_Init+0x60>)
 800040a:	f001 fa0b 	bl	8001824 <HAL_SPI_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_SPI1_Init+0x5c>
  {
    Error_Handler();
 8000414:	f000 f8a0 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	bd80      	pop	{r7, pc}
 800041c:	2000011c 	.word	0x2000011c
 8000420:	40013000 	.word	0x40013000

08000424 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000428:	4b17      	ldr	r3, [pc, #92]	; (8000488 <MX_SPI2_Init+0x64>)
 800042a:	4a18      	ldr	r2, [pc, #96]	; (800048c <MX_SPI2_Init+0x68>)
 800042c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800042e:	4b16      	ldr	r3, [pc, #88]	; (8000488 <MX_SPI2_Init+0x64>)
 8000430:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000434:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000436:	4b14      	ldr	r3, [pc, #80]	; (8000488 <MX_SPI2_Init+0x64>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800043c:	4b12      	ldr	r3, [pc, #72]	; (8000488 <MX_SPI2_Init+0x64>)
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000442:	4b11      	ldr	r3, [pc, #68]	; (8000488 <MX_SPI2_Init+0x64>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000448:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <MX_SPI2_Init+0x64>)
 800044a:	2200      	movs	r2, #0
 800044c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800044e:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <MX_SPI2_Init+0x64>)
 8000450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000454:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <MX_SPI2_Init+0x64>)
 8000458:	2200      	movs	r2, #0
 800045a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800045c:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <MX_SPI2_Init+0x64>)
 800045e:	2200      	movs	r2, #0
 8000460:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <MX_SPI2_Init+0x64>)
 8000464:	2200      	movs	r2, #0
 8000466:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000468:	4b07      	ldr	r3, [pc, #28]	; (8000488 <MX_SPI2_Init+0x64>)
 800046a:	2200      	movs	r2, #0
 800046c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800046e:	4b06      	ldr	r3, [pc, #24]	; (8000488 <MX_SPI2_Init+0x64>)
 8000470:	220a      	movs	r2, #10
 8000472:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000474:	4804      	ldr	r0, [pc, #16]	; (8000488 <MX_SPI2_Init+0x64>)
 8000476:	f001 f9d5 	bl	8001824 <HAL_SPI_Init>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000480:	f000 f86a 	bl	8000558 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}
 8000488:	200000a8 	.word	0x200000a8
 800048c:	40003800 	.word	0x40003800

08000490 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b086      	sub	sp, #24
 8000494:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000496:	f107 0308 	add.w	r3, r7, #8
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a4:	4b29      	ldr	r3, [pc, #164]	; (800054c <MX_GPIO_Init+0xbc>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a28      	ldr	r2, [pc, #160]	; (800054c <MX_GPIO_Init+0xbc>)
 80004aa:	f043 0304 	orr.w	r3, r3, #4
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b26      	ldr	r3, [pc, #152]	; (800054c <MX_GPIO_Init+0xbc>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0304 	and.w	r3, r3, #4
 80004b8:	607b      	str	r3, [r7, #4]
 80004ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004bc:	4b23      	ldr	r3, [pc, #140]	; (800054c <MX_GPIO_Init+0xbc>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a22      	ldr	r2, [pc, #136]	; (800054c <MX_GPIO_Init+0xbc>)
 80004c2:	f043 0308 	orr.w	r3, r3, #8
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b20      	ldr	r3, [pc, #128]	; (800054c <MX_GPIO_Init+0xbc>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0308 	and.w	r3, r3, #8
 80004d0:	603b      	str	r3, [r7, #0]
 80004d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MISO_Slave_Pin|CLK_Pin|SELECT_SERIAL_Pin|MOSI_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 5199 	mov.w	r1, #4896	; 0x1320
 80004da:	481d      	ldr	r0, [pc, #116]	; (8000550 <MX_GPIO_Init+0xc0>)
 80004dc:	f000 fda0 	bl	8001020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e6:	481b      	ldr	r0, [pc, #108]	; (8000554 <MX_GPIO_Init+0xc4>)
 80004e8:	f000 fd9a 	bl	8001020 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOSI_Slave_Pin SS_Slave_Pin CLK_Slave_Pin MISO_Pin */
  GPIO_InitStruct.Pin = MOSI_Slave_Pin|SS_Slave_Pin|CLK_Slave_Pin|MISO_Pin;
 80004ec:	f44f 630d 	mov.w	r3, #2256	; 0x8d0
 80004f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fa:	f107 0308 	add.w	r3, r7, #8
 80004fe:	4619      	mov	r1, r3
 8000500:	4813      	ldr	r0, [pc, #76]	; (8000550 <MX_GPIO_Init+0xc0>)
 8000502:	f000 fc33 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pins : MISO_Slave_Pin CLK_Pin SELECT_SERIAL_Pin MOSI_Pin */
  GPIO_InitStruct.Pin = MISO_Slave_Pin|CLK_Pin|SELECT_SERIAL_Pin|MOSI_Pin;
 8000506:	f44f 5399 	mov.w	r3, #4896	; 0x1320
 800050a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050c:	2301      	movs	r3, #1
 800050e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000514:	2302      	movs	r3, #2
 8000516:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000518:	f107 0308 	add.w	r3, r7, #8
 800051c:	4619      	mov	r1, r3
 800051e:	480c      	ldr	r0, [pc, #48]	; (8000550 <MX_GPIO_Init+0xc0>)
 8000520:	f000 fc24 	bl	8000d6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000528:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052a:	2301      	movs	r3, #1
 800052c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000532:	2302      	movs	r3, #2
 8000534:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000536:	f107 0308 	add.w	r3, r7, #8
 800053a:	4619      	mov	r1, r3
 800053c:	4805      	ldr	r0, [pc, #20]	; (8000554 <MX_GPIO_Init+0xc4>)
 800053e:	f000 fc15 	bl	8000d6c <HAL_GPIO_Init>

}
 8000542:	bf00      	nop
 8000544:	3718      	adds	r7, #24
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000
 8000550:	40010800 	.word	0x40010800
 8000554:	40010c00 	.word	0x40010c00

08000558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr

08000564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000564:	b480      	push	{r7}
 8000566:	b085      	sub	sp, #20
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800056a:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <HAL_MspInit+0x5c>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <HAL_MspInit+0x5c>)
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6193      	str	r3, [r2, #24]
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_MspInit+0x5c>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000582:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <HAL_MspInit+0x5c>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <HAL_MspInit+0x5c>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	61d3      	str	r3, [r2, #28]
 800058e:	4b0c      	ldr	r3, [pc, #48]	; (80005c0 <HAL_MspInit+0x5c>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800059a:	4b0a      	ldr	r3, [pc, #40]	; (80005c4 <HAL_MspInit+0x60>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_MspInit+0x60>)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	40021000 	.word	0x40021000
 80005c4:	40010000 	.word	0x40010000

080005c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b08c      	sub	sp, #48	; 0x30
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a53      	ldr	r2, [pc, #332]	; (8000730 <HAL_SPI_MspInit+0x168>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d15f      	bne.n	80006a8 <HAL_SPI_MspInit+0xe0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80005e8:	4b52      	ldr	r3, [pc, #328]	; (8000734 <HAL_SPI_MspInit+0x16c>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a51      	ldr	r2, [pc, #324]	; (8000734 <HAL_SPI_MspInit+0x16c>)
 80005ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b4f      	ldr	r3, [pc, #316]	; (8000734 <HAL_SPI_MspInit+0x16c>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005fc:	61bb      	str	r3, [r7, #24]
 80005fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b4c      	ldr	r3, [pc, #304]	; (8000734 <HAL_SPI_MspInit+0x16c>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a4b      	ldr	r2, [pc, #300]	; (8000734 <HAL_SPI_MspInit+0x16c>)
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b49      	ldr	r3, [pc, #292]	; (8000734 <HAL_SPI_MspInit+0x16c>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0304 	and.w	r3, r3, #4
 8000614:	617b      	str	r3, [r7, #20]
 8000616:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000618:	4b46      	ldr	r3, [pc, #280]	; (8000734 <HAL_SPI_MspInit+0x16c>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a45      	ldr	r2, [pc, #276]	; (8000734 <HAL_SPI_MspInit+0x16c>)
 800061e:	f043 0308 	orr.w	r3, r3, #8
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b43      	ldr	r3, [pc, #268]	; (8000734 <HAL_SPI_MspInit+0x16c>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0308 	and.w	r3, r3, #8
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	693b      	ldr	r3, [r7, #16]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000636:	2300      	movs	r3, #0
 8000638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	4619      	mov	r1, r3
 8000644:	483c      	ldr	r0, [pc, #240]	; (8000738 <HAL_SPI_MspInit+0x170>)
 8000646:	f000 fb91 	bl	8000d6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800064a:	2328      	movs	r3, #40	; 0x28
 800064c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064e:	2300      	movs	r3, #0
 8000650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4619      	mov	r1, r3
 800065c:	4837      	ldr	r0, [pc, #220]	; (800073c <HAL_SPI_MspInit+0x174>)
 800065e:	f000 fb85 	bl	8000d6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000662:	2310      	movs	r3, #16
 8000664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000666:	2302      	movs	r3, #2
 8000668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800066a:	2303      	movs	r3, #3
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	4619      	mov	r1, r3
 8000674:	4831      	ldr	r0, [pc, #196]	; (800073c <HAL_SPI_MspInit+0x174>)
 8000676:	f000 fb79 	bl	8000d6c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800067a:	4b31      	ldr	r3, [pc, #196]	; (8000740 <HAL_SPI_MspInit+0x178>)
 800067c:	685b      	ldr	r3, [r3, #4]
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000682:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000690:	4a2b      	ldr	r2, [pc, #172]	; (8000740 <HAL_SPI_MspInit+0x178>)
 8000692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000694:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000696:	2200      	movs	r2, #0
 8000698:	2100      	movs	r1, #0
 800069a:	2023      	movs	r0, #35	; 0x23
 800069c:	f000 fab9 	bl	8000c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80006a0:	2023      	movs	r0, #35	; 0x23
 80006a2:	f000 fad2 	bl	8000c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80006a6:	e03e      	b.n	8000726 <HAL_SPI_MspInit+0x15e>
  else if(hspi->Instance==SPI2)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a25      	ldr	r2, [pc, #148]	; (8000744 <HAL_SPI_MspInit+0x17c>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d139      	bne.n	8000726 <HAL_SPI_MspInit+0x15e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80006b2:	4b20      	ldr	r3, [pc, #128]	; (8000734 <HAL_SPI_MspInit+0x16c>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a1f      	ldr	r2, [pc, #124]	; (8000734 <HAL_SPI_MspInit+0x16c>)
 80006b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006bc:	61d3      	str	r3, [r2, #28]
 80006be:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <HAL_SPI_MspInit+0x16c>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	4b1a      	ldr	r3, [pc, #104]	; (8000734 <HAL_SPI_MspInit+0x16c>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4a19      	ldr	r2, [pc, #100]	; (8000734 <HAL_SPI_MspInit+0x16c>)
 80006d0:	f043 0308 	orr.w	r3, r3, #8
 80006d4:	6193      	str	r3, [r2, #24]
 80006d6:	4b17      	ldr	r3, [pc, #92]	; (8000734 <HAL_SPI_MspInit+0x16c>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80006e2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80006e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	4811      	ldr	r0, [pc, #68]	; (800073c <HAL_SPI_MspInit+0x174>)
 80006f8:	f000 fb38 	bl	8000d6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80006fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	480a      	ldr	r0, [pc, #40]	; (800073c <HAL_SPI_MspInit+0x174>)
 8000712:	f000 fb2b 	bl	8000d6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2024      	movs	r0, #36	; 0x24
 800071c:	f000 fa79 	bl	8000c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000720:	2024      	movs	r0, #36	; 0x24
 8000722:	f000 fa92 	bl	8000c4a <HAL_NVIC_EnableIRQ>
}
 8000726:	bf00      	nop
 8000728:	3730      	adds	r7, #48	; 0x30
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40013000 	.word	0x40013000
 8000734:	40021000 	.word	0x40021000
 8000738:	40010800 	.word	0x40010800
 800073c:	40010c00 	.word	0x40010c00
 8000740:	40010000 	.word	0x40010000
 8000744:	40003800 	.word	0x40003800

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <HardFault_Handler+0x4>

0800075a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <MemManage_Handler+0x4>

08000760 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <BusFault_Handler+0x4>

08000766 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <UsageFault_Handler+0x4>

0800076c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000794:	f000 f928 	bl	80009e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80007a0:	4802      	ldr	r0, [pc, #8]	; (80007ac <SPI1_IRQHandler+0x10>)
 80007a2:	f001 fa7f 	bl	8001ca4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000011c 	.word	0x2000011c

080007b0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <SPI2_IRQHandler+0x10>)
 80007b6:	f001 fa75 	bl	8001ca4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000a8 	.word	0x200000a8

080007c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	e00a      	b.n	80007ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007d6:	f3af 8000 	nop.w
 80007da:	4601      	mov	r1, r0
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	1c5a      	adds	r2, r3, #1
 80007e0:	60ba      	str	r2, [r7, #8]
 80007e2:	b2ca      	uxtb	r2, r1
 80007e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e6:	697b      	ldr	r3, [r7, #20]
 80007e8:	3301      	adds	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
 80007ec:	697a      	ldr	r2, [r7, #20]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	dbf0      	blt.n	80007d6 <_read+0x12>
	}

return len;
 80007f4:	687b      	ldr	r3, [r7, #4]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b086      	sub	sp, #24
 8000802:	af00      	add	r7, sp, #0
 8000804:	60f8      	str	r0, [r7, #12]
 8000806:	60b9      	str	r1, [r7, #8]
 8000808:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	e009      	b.n	8000824 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	60ba      	str	r2, [r7, #8]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081e:	697b      	ldr	r3, [r7, #20]
 8000820:	3301      	adds	r3, #1
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697a      	ldr	r2, [r7, #20]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	429a      	cmp	r2, r3
 800082a:	dbf1      	blt.n	8000810 <_write+0x12>
	}
	return len;
 800082c:	687b      	ldr	r3, [r7, #4]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <_close>:

int _close(int file)
{
 8000836:	b480      	push	{r7}
 8000838:	b083      	sub	sp, #12
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
	return -1;
 800083e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000842:	4618      	mov	r0, r3
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800085c:	605a      	str	r2, [r3, #4]
	return 0;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr

0800086a <_isatty>:

int _isatty(int file)
{
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
	return 1;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800087e:	b480      	push	{r7}
 8000880:	b085      	sub	sp, #20
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	60b9      	str	r1, [r7, #8]
 8000888:	607a      	str	r2, [r7, #4]
	return 0;
 800088a:	2300      	movs	r3, #0
}
 800088c:	4618      	mov	r0, r3
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr
	...

08000898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <_sbrk+0x5c>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <_sbrk+0x60>)
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <_sbrk+0x64>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <_sbrk+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d207      	bcs.n	80008d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c8:	f001 fe56 	bl	8002578 <__errno>
 80008cc:	4602      	mov	r2, r0
 80008ce:	230c      	movs	r3, #12
 80008d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	e009      	b.n	80008ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <_sbrk+0x64>)
 80008e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20005000 	.word	0x20005000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	2000009c 	.word	0x2000009c
 8000900:	20000180 	.word	0x20000180

08000904 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000912:	490d      	ldr	r1, [pc, #52]	; (8000948 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000928:	4c0a      	ldr	r4, [pc, #40]	; (8000954 <LoopFillZerobss+0x22>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000936:	f7ff ffe5 	bl	8000904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093a:	f001 fe23 	bl	8002584 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093e:	f7ff fccf 	bl	80002e0 <main>
  bx lr
 8000942:	4770      	bx	lr
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800094c:	080034b8 	.word	0x080034b8
  ldr r2, =_sbss
 8000950:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000954:	2000017c 	.word	0x2000017c

08000958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC1_2_IRQHandler>
	...

0800095c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_Init+0x28>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a07      	ldr	r2, [pc, #28]	; (8000984 <HAL_Init+0x28>)
 8000966:	f043 0310 	orr.w	r3, r3, #16
 800096a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096c:	2003      	movs	r0, #3
 800096e:	f000 f945 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000972:	2000      	movs	r0, #0
 8000974:	f000 f808 	bl	8000988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000978:	f7ff fdf4 	bl	8000564 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40022000 	.word	0x40022000

08000988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_InitTick+0x54>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_InitTick+0x58>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099e:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f95d 	bl	8000c66 <HAL_SYSTICK_Config>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00e      	b.n	80009d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	d80a      	bhi.n	80009d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009bc:	2200      	movs	r2, #0
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f000 f925 	bl	8000c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <HAL_InitTick+0x5c>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	e000      	b.n	80009d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2000000c 	.word	0x2000000c
 80009e0:	20000014 	.word	0x20000014
 80009e4:	20000010 	.word	0x20000010

080009e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <HAL_IncTick+0x1c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_IncTick+0x20>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	4a03      	ldr	r2, [pc, #12]	; (8000a08 <HAL_IncTick+0x20>)
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	20000014 	.word	0x20000014
 8000a08:	20000174 	.word	0x20000174

08000a0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a10:	4b02      	ldr	r3, [pc, #8]	; (8000a1c <HAL_GetTick+0x10>)
 8000a12:	681b      	ldr	r3, [r3, #0]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	20000174 	.word	0x20000174

08000a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a28:	f7ff fff0 	bl	8000a0c <HAL_GetTick>
 8000a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a38:	d005      	beq.n	8000a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_Delay+0x40>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4413      	add	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a46:	bf00      	nop
 8000a48:	f7ff ffe0 	bl	8000a0c <HAL_GetTick>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d8f7      	bhi.n	8000a48 <HAL_Delay+0x28>
  {
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000014 	.word	0x20000014

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0b      	blt.n	8000af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f003 021f 	and.w	r2, r3, #31
 8000ae0:	4906      	ldr	r1, [pc, #24]	; (8000afc <__NVIC_EnableIRQ+0x34>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	2001      	movs	r0, #1
 8000aea:	fa00 f202 	lsl.w	r2, r0, r2
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100

08000b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	; (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	; (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
         );
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc8:	d301      	bcc.n	8000bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00f      	b.n	8000bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <SysTick_Config+0x40>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f7ff ff90 	bl	8000b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <SysTick_Config+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <SysTick_Config+0x40>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ff2d 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c24:	f7ff ff42 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	6978      	ldr	r0, [r7, #20]
 8000c30:	f7ff ff90 	bl	8000b54 <NVIC_EncodePriority>
 8000c34:	4602      	mov	r2, r0
 8000c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff5f 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff35 	bl	8000ac8 <__NVIC_EnableIRQ>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ffa2 	bl	8000bb8 <SysTick_Config>
 8000c74:	4603      	mov	r3, r0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d005      	beq.n	8000ca2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2204      	movs	r2, #4
 8000c9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e051      	b.n	8000d46 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f022 020e 	bic.w	r2, r2, #14
 8000cb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 0201 	bic.w	r2, r2, #1
 8000cc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a22      	ldr	r2, [pc, #136]	; (8000d50 <HAL_DMA_Abort_IT+0xd0>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d029      	beq.n	8000d20 <HAL_DMA_Abort_IT+0xa0>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a20      	ldr	r2, [pc, #128]	; (8000d54 <HAL_DMA_Abort_IT+0xd4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d022      	beq.n	8000d1c <HAL_DMA_Abort_IT+0x9c>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a1f      	ldr	r2, [pc, #124]	; (8000d58 <HAL_DMA_Abort_IT+0xd8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d01a      	beq.n	8000d16 <HAL_DMA_Abort_IT+0x96>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a1d      	ldr	r2, [pc, #116]	; (8000d5c <HAL_DMA_Abort_IT+0xdc>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d012      	beq.n	8000d10 <HAL_DMA_Abort_IT+0x90>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a1c      	ldr	r2, [pc, #112]	; (8000d60 <HAL_DMA_Abort_IT+0xe0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d00a      	beq.n	8000d0a <HAL_DMA_Abort_IT+0x8a>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a1a      	ldr	r2, [pc, #104]	; (8000d64 <HAL_DMA_Abort_IT+0xe4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d102      	bne.n	8000d04 <HAL_DMA_Abort_IT+0x84>
 8000cfe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d02:	e00e      	b.n	8000d22 <HAL_DMA_Abort_IT+0xa2>
 8000d04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d08:	e00b      	b.n	8000d22 <HAL_DMA_Abort_IT+0xa2>
 8000d0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d0e:	e008      	b.n	8000d22 <HAL_DMA_Abort_IT+0xa2>
 8000d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d14:	e005      	b.n	8000d22 <HAL_DMA_Abort_IT+0xa2>
 8000d16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d1a:	e002      	b.n	8000d22 <HAL_DMA_Abort_IT+0xa2>
 8000d1c:	2310      	movs	r3, #16
 8000d1e:	e000      	b.n	8000d22 <HAL_DMA_Abort_IT+0xa2>
 8000d20:	2301      	movs	r3, #1
 8000d22:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <HAL_DMA_Abort_IT+0xe8>)
 8000d24:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	4798      	blx	r3
    } 
  }
  return status;
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40020008 	.word	0x40020008
 8000d54:	4002001c 	.word	0x4002001c
 8000d58:	40020030 	.word	0x40020030
 8000d5c:	40020044 	.word	0x40020044
 8000d60:	40020058 	.word	0x40020058
 8000d64:	4002006c 	.word	0x4002006c
 8000d68:	40020000 	.word	0x40020000

08000d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b08b      	sub	sp, #44	; 0x2c
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d7e:	e127      	b.n	8000fd0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d80:	2201      	movs	r2, #1
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	69fa      	ldr	r2, [r7, #28]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	f040 8116 	bne.w	8000fca <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b12      	cmp	r3, #18
 8000da4:	d034      	beq.n	8000e10 <HAL_GPIO_Init+0xa4>
 8000da6:	2b12      	cmp	r3, #18
 8000da8:	d80d      	bhi.n	8000dc6 <HAL_GPIO_Init+0x5a>
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d02b      	beq.n	8000e06 <HAL_GPIO_Init+0x9a>
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d804      	bhi.n	8000dbc <HAL_GPIO_Init+0x50>
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d031      	beq.n	8000e1a <HAL_GPIO_Init+0xae>
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d01c      	beq.n	8000df4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dba:	e048      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d043      	beq.n	8000e48 <HAL_GPIO_Init+0xdc>
 8000dc0:	2b11      	cmp	r3, #17
 8000dc2:	d01b      	beq.n	8000dfc <HAL_GPIO_Init+0x90>
          break;
 8000dc4:	e043      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dc6:	4a89      	ldr	r2, [pc, #548]	; (8000fec <HAL_GPIO_Init+0x280>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d026      	beq.n	8000e1a <HAL_GPIO_Init+0xae>
 8000dcc:	4a87      	ldr	r2, [pc, #540]	; (8000fec <HAL_GPIO_Init+0x280>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d806      	bhi.n	8000de0 <HAL_GPIO_Init+0x74>
 8000dd2:	4a87      	ldr	r2, [pc, #540]	; (8000ff0 <HAL_GPIO_Init+0x284>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d020      	beq.n	8000e1a <HAL_GPIO_Init+0xae>
 8000dd8:	4a86      	ldr	r2, [pc, #536]	; (8000ff4 <HAL_GPIO_Init+0x288>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d01d      	beq.n	8000e1a <HAL_GPIO_Init+0xae>
          break;
 8000dde:	e036      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000de0:	4a85      	ldr	r2, [pc, #532]	; (8000ff8 <HAL_GPIO_Init+0x28c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d019      	beq.n	8000e1a <HAL_GPIO_Init+0xae>
 8000de6:	4a85      	ldr	r2, [pc, #532]	; (8000ffc <HAL_GPIO_Init+0x290>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d016      	beq.n	8000e1a <HAL_GPIO_Init+0xae>
 8000dec:	4a84      	ldr	r2, [pc, #528]	; (8001000 <HAL_GPIO_Init+0x294>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d013      	beq.n	8000e1a <HAL_GPIO_Init+0xae>
          break;
 8000df2:	e02c      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	623b      	str	r3, [r7, #32]
          break;
 8000dfa:	e028      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	3304      	adds	r3, #4
 8000e02:	623b      	str	r3, [r7, #32]
          break;
 8000e04:	e023      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	623b      	str	r3, [r7, #32]
          break;
 8000e0e:	e01e      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	330c      	adds	r3, #12
 8000e16:	623b      	str	r3, [r7, #32]
          break;
 8000e18:	e019      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e22:	2304      	movs	r3, #4
 8000e24:	623b      	str	r3, [r7, #32]
          break;
 8000e26:	e012      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d105      	bne.n	8000e3c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e30:	2308      	movs	r3, #8
 8000e32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69fa      	ldr	r2, [r7, #28]
 8000e38:	611a      	str	r2, [r3, #16]
          break;
 8000e3a:	e008      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69fa      	ldr	r2, [r7, #28]
 8000e44:	615a      	str	r2, [r3, #20]
          break;
 8000e46:	e002      	b.n	8000e4e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
          break;
 8000e4c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	2bff      	cmp	r3, #255	; 0xff
 8000e52:	d801      	bhi.n	8000e58 <HAL_GPIO_Init+0xec>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	e001      	b.n	8000e5c <HAL_GPIO_Init+0xf0>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	2bff      	cmp	r3, #255	; 0xff
 8000e62:	d802      	bhi.n	8000e6a <HAL_GPIO_Init+0xfe>
 8000e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	e002      	b.n	8000e70 <HAL_GPIO_Init+0x104>
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	3b08      	subs	r3, #8
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	210f      	movs	r1, #15
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	401a      	ands	r2, r3
 8000e82:	6a39      	ldr	r1, [r7, #32]
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	431a      	orrs	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	f000 8096 	beq.w	8000fca <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e9e:	4b59      	ldr	r3, [pc, #356]	; (8001004 <HAL_GPIO_Init+0x298>)
 8000ea0:	699b      	ldr	r3, [r3, #24]
 8000ea2:	4a58      	ldr	r2, [pc, #352]	; (8001004 <HAL_GPIO_Init+0x298>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6193      	str	r3, [r2, #24]
 8000eaa:	4b56      	ldr	r3, [pc, #344]	; (8001004 <HAL_GPIO_Init+0x298>)
 8000eac:	699b      	ldr	r3, [r3, #24]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000eb6:	4a54      	ldr	r2, [pc, #336]	; (8001008 <HAL_GPIO_Init+0x29c>)
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	220f      	movs	r2, #15
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4b      	ldr	r2, [pc, #300]	; (800100c <HAL_GPIO_Init+0x2a0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d013      	beq.n	8000f0a <HAL_GPIO_Init+0x19e>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4a      	ldr	r2, [pc, #296]	; (8001010 <HAL_GPIO_Init+0x2a4>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00d      	beq.n	8000f06 <HAL_GPIO_Init+0x19a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a49      	ldr	r2, [pc, #292]	; (8001014 <HAL_GPIO_Init+0x2a8>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d007      	beq.n	8000f02 <HAL_GPIO_Init+0x196>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a48      	ldr	r2, [pc, #288]	; (8001018 <HAL_GPIO_Init+0x2ac>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_GPIO_Init+0x192>
 8000efa:	2303      	movs	r3, #3
 8000efc:	e006      	b.n	8000f0c <HAL_GPIO_Init+0x1a0>
 8000efe:	2304      	movs	r3, #4
 8000f00:	e004      	b.n	8000f0c <HAL_GPIO_Init+0x1a0>
 8000f02:	2302      	movs	r3, #2
 8000f04:	e002      	b.n	8000f0c <HAL_GPIO_Init+0x1a0>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <HAL_GPIO_Init+0x1a0>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f0e:	f002 0203 	and.w	r2, r2, #3
 8000f12:	0092      	lsls	r2, r2, #2
 8000f14:	4093      	lsls	r3, r2
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f1c:	493a      	ldr	r1, [pc, #232]	; (8001008 <HAL_GPIO_Init+0x29c>)
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	089b      	lsrs	r3, r3, #2
 8000f22:	3302      	adds	r3, #2
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d006      	beq.n	8000f44 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f36:	4b39      	ldr	r3, [pc, #228]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4938      	ldr	r1, [pc, #224]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	600b      	str	r3, [r1, #0]
 8000f42:	e006      	b.n	8000f52 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f44:	4b35      	ldr	r3, [pc, #212]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	4933      	ldr	r1, [pc, #204]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f4e:	4013      	ands	r3, r2
 8000f50:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	492e      	ldr	r1, [pc, #184]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	604b      	str	r3, [r1, #4]
 8000f6a:	e006      	b.n	8000f7a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f6c:	4b2b      	ldr	r3, [pc, #172]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	4929      	ldr	r1, [pc, #164]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f76:	4013      	ands	r3, r2
 8000f78:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d006      	beq.n	8000f94 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f86:	4b25      	ldr	r3, [pc, #148]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	4924      	ldr	r1, [pc, #144]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	608b      	str	r3, [r1, #8]
 8000f92:	e006      	b.n	8000fa2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f94:	4b21      	ldr	r3, [pc, #132]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	491f      	ldr	r1, [pc, #124]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d006      	beq.n	8000fbc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fae:	4b1b      	ldr	r3, [pc, #108]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	491a      	ldr	r1, [pc, #104]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	60cb      	str	r3, [r1, #12]
 8000fba:	e006      	b.n	8000fca <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000fbe:	68da      	ldr	r2, [r3, #12]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	4915      	ldr	r1, [pc, #84]	; (800101c <HAL_GPIO_Init+0x2b0>)
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	3301      	adds	r3, #1
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f47f aed0 	bne.w	8000d80 <HAL_GPIO_Init+0x14>
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	372c      	adds	r7, #44	; 0x2c
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	10210000 	.word	0x10210000
 8000ff0:	10110000 	.word	0x10110000
 8000ff4:	10120000 	.word	0x10120000
 8000ff8:	10310000 	.word	0x10310000
 8000ffc:	10320000 	.word	0x10320000
 8001000:	10220000 	.word	0x10220000
 8001004:	40021000 	.word	0x40021000
 8001008:	40010000 	.word	0x40010000
 800100c:	40010800 	.word	0x40010800
 8001010:	40010c00 	.word	0x40010c00
 8001014:	40011000 	.word	0x40011000
 8001018:	40011400 	.word	0x40011400
 800101c:	40010400 	.word	0x40010400

08001020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	460b      	mov	r3, r1
 800102a:	807b      	strh	r3, [r7, #2]
 800102c:	4613      	mov	r3, r2
 800102e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001030:	787b      	ldrb	r3, [r7, #1]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001036:	887a      	ldrh	r2, [r7, #2]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800103c:	e003      	b.n	8001046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800103e:	887b      	ldrh	r3, [r7, #2]
 8001040:	041a      	lsls	r2, r3, #16
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	611a      	str	r2, [r3, #16]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e26c      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	f000 8087 	beq.w	800117e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001070:	4b92      	ldr	r3, [pc, #584]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 030c 	and.w	r3, r3, #12
 8001078:	2b04      	cmp	r3, #4
 800107a:	d00c      	beq.n	8001096 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800107c:	4b8f      	ldr	r3, [pc, #572]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f003 030c 	and.w	r3, r3, #12
 8001084:	2b08      	cmp	r3, #8
 8001086:	d112      	bne.n	80010ae <HAL_RCC_OscConfig+0x5e>
 8001088:	4b8c      	ldr	r3, [pc, #560]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001094:	d10b      	bne.n	80010ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001096:	4b89      	ldr	r3, [pc, #548]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d06c      	beq.n	800117c <HAL_RCC_OscConfig+0x12c>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d168      	bne.n	800117c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e246      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b6:	d106      	bne.n	80010c6 <HAL_RCC_OscConfig+0x76>
 80010b8:	4b80      	ldr	r3, [pc, #512]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a7f      	ldr	r2, [pc, #508]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	e02e      	b.n	8001124 <HAL_RCC_OscConfig+0xd4>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10c      	bne.n	80010e8 <HAL_RCC_OscConfig+0x98>
 80010ce:	4b7b      	ldr	r3, [pc, #492]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a7a      	ldr	r2, [pc, #488]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	4b78      	ldr	r3, [pc, #480]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a77      	ldr	r2, [pc, #476]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	e01d      	b.n	8001124 <HAL_RCC_OscConfig+0xd4>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f0:	d10c      	bne.n	800110c <HAL_RCC_OscConfig+0xbc>
 80010f2:	4b72      	ldr	r3, [pc, #456]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a71      	ldr	r2, [pc, #452]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80010f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b6f      	ldr	r3, [pc, #444]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a6e      	ldr	r2, [pc, #440]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e00b      	b.n	8001124 <HAL_RCC_OscConfig+0xd4>
 800110c:	4b6b      	ldr	r3, [pc, #428]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a6a      	ldr	r2, [pc, #424]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b68      	ldr	r3, [pc, #416]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a67      	ldr	r2, [pc, #412]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800111e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001122:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d013      	beq.n	8001154 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff fc6e 	bl	8000a0c <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001134:	f7ff fc6a 	bl	8000a0c <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b64      	cmp	r3, #100	; 0x64
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e1fa      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	4b5d      	ldr	r3, [pc, #372]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f0      	beq.n	8001134 <HAL_RCC_OscConfig+0xe4>
 8001152:	e014      	b.n	800117e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fc5a 	bl	8000a0c <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fc56 	bl	8000a0c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	; 0x64
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e1e6      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116e:	4b53      	ldr	r3, [pc, #332]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x10c>
 800117a:	e000      	b.n	800117e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d063      	beq.n	8001252 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800118a:	4b4c      	ldr	r3, [pc, #304]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 030c 	and.w	r3, r3, #12
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00b      	beq.n	80011ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001196:	4b49      	ldr	r3, [pc, #292]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b08      	cmp	r3, #8
 80011a0:	d11c      	bne.n	80011dc <HAL_RCC_OscConfig+0x18c>
 80011a2:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d116      	bne.n	80011dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ae:	4b43      	ldr	r3, [pc, #268]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <HAL_RCC_OscConfig+0x176>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d001      	beq.n	80011c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e1ba      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c6:	4b3d      	ldr	r3, [pc, #244]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	4939      	ldr	r1, [pc, #228]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011da:	e03a      	b.n	8001252 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d020      	beq.n	8001226 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e4:	4b36      	ldr	r3, [pc, #216]	; (80012c0 <HAL_RCC_OscConfig+0x270>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ea:	f7ff fc0f 	bl	8000a0c <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f2:	f7ff fc0b 	bl	8000a0c <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e19b      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001204:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001210:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	695b      	ldr	r3, [r3, #20]
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	4927      	ldr	r1, [pc, #156]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001220:	4313      	orrs	r3, r2
 8001222:	600b      	str	r3, [r1, #0]
 8001224:	e015      	b.n	8001252 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <HAL_RCC_OscConfig+0x270>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fbee 	bl	8000a0c <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001234:	f7ff fbea 	bl	8000a0c <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e17a      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	2b00      	cmp	r3, #0
 800125c:	d03a      	beq.n	80012d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d019      	beq.n	800129a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_RCC_OscConfig+0x274>)
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126c:	f7ff fbce 	bl	8000a0c <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001274:	f7ff fbca 	bl	8000a0c <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e15a      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <HAL_RCC_OscConfig+0x26c>)
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001292:	2001      	movs	r0, #1
 8001294:	f000 faa8 	bl	80017e8 <RCC_Delay>
 8001298:	e01c      	b.n	80012d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800129a:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <HAL_RCC_OscConfig+0x274>)
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a0:	f7ff fbb4 	bl	8000a0c <HAL_GetTick>
 80012a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a6:	e00f      	b.n	80012c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a8:	f7ff fbb0 	bl	8000a0c <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d908      	bls.n	80012c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e140      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
 80012ba:	bf00      	nop
 80012bc:	40021000 	.word	0x40021000
 80012c0:	42420000 	.word	0x42420000
 80012c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c8:	4b9e      	ldr	r3, [pc, #632]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1e9      	bne.n	80012a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80a6 	beq.w	800142e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e6:	4b97      	ldr	r3, [pc, #604]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10d      	bne.n	800130e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	4b94      	ldr	r3, [pc, #592]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a93      	ldr	r2, [pc, #588]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b91      	ldr	r3, [pc, #580]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800130a:	2301      	movs	r3, #1
 800130c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130e:	4b8e      	ldr	r3, [pc, #568]	; (8001548 <HAL_RCC_OscConfig+0x4f8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d118      	bne.n	800134c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131a:	4b8b      	ldr	r3, [pc, #556]	; (8001548 <HAL_RCC_OscConfig+0x4f8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a8a      	ldr	r2, [pc, #552]	; (8001548 <HAL_RCC_OscConfig+0x4f8>)
 8001320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001326:	f7ff fb71 	bl	8000a0c <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132e:	f7ff fb6d 	bl	8000a0c <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b64      	cmp	r3, #100	; 0x64
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e0fd      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001340:	4b81      	ldr	r3, [pc, #516]	; (8001548 <HAL_RCC_OscConfig+0x4f8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d106      	bne.n	8001362 <HAL_RCC_OscConfig+0x312>
 8001354:	4b7b      	ldr	r3, [pc, #492]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4a7a      	ldr	r2, [pc, #488]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 800135a:	f043 0301 	orr.w	r3, r3, #1
 800135e:	6213      	str	r3, [r2, #32]
 8001360:	e02d      	b.n	80013be <HAL_RCC_OscConfig+0x36e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x334>
 800136a:	4b76      	ldr	r3, [pc, #472]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a75      	ldr	r2, [pc, #468]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	6213      	str	r3, [r2, #32]
 8001376:	4b73      	ldr	r3, [pc, #460]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4a72      	ldr	r2, [pc, #456]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 800137c:	f023 0304 	bic.w	r3, r3, #4
 8001380:	6213      	str	r3, [r2, #32]
 8001382:	e01c      	b.n	80013be <HAL_RCC_OscConfig+0x36e>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b05      	cmp	r3, #5
 800138a:	d10c      	bne.n	80013a6 <HAL_RCC_OscConfig+0x356>
 800138c:	4b6d      	ldr	r3, [pc, #436]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	4a6c      	ldr	r2, [pc, #432]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6213      	str	r3, [r2, #32]
 8001398:	4b6a      	ldr	r3, [pc, #424]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	4a69      	ldr	r2, [pc, #420]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6213      	str	r3, [r2, #32]
 80013a4:	e00b      	b.n	80013be <HAL_RCC_OscConfig+0x36e>
 80013a6:	4b67      	ldr	r3, [pc, #412]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4a66      	ldr	r2, [pc, #408]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80013ac:	f023 0301 	bic.w	r3, r3, #1
 80013b0:	6213      	str	r3, [r2, #32]
 80013b2:	4b64      	ldr	r3, [pc, #400]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4a63      	ldr	r2, [pc, #396]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80013b8:	f023 0304 	bic.w	r3, r3, #4
 80013bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d015      	beq.n	80013f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c6:	f7ff fb21 	bl	8000a0c <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013cc:	e00a      	b.n	80013e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ce:	f7ff fb1d 	bl	8000a0c <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013dc:	4293      	cmp	r3, r2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e0ab      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e4:	4b57      	ldr	r3, [pc, #348]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0ee      	beq.n	80013ce <HAL_RCC_OscConfig+0x37e>
 80013f0:	e014      	b.n	800141c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f2:	f7ff fb0b 	bl	8000a0c <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f8:	e00a      	b.n	8001410 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fa:	f7ff fb07 	bl	8000a0c <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	f241 3288 	movw	r2, #5000	; 0x1388
 8001408:	4293      	cmp	r3, r2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e095      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001410:	4b4c      	ldr	r3, [pc, #304]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1ee      	bne.n	80013fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800141c:	7dfb      	ldrb	r3, [r7, #23]
 800141e:	2b01      	cmp	r3, #1
 8001420:	d105      	bne.n	800142e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001422:	4b48      	ldr	r3, [pc, #288]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	4a47      	ldr	r2, [pc, #284]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001428:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800142c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8081 	beq.w	800153a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001438:	4b42      	ldr	r3, [pc, #264]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 030c 	and.w	r3, r3, #12
 8001440:	2b08      	cmp	r3, #8
 8001442:	d061      	beq.n	8001508 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d146      	bne.n	80014da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800144c:	4b3f      	ldr	r3, [pc, #252]	; (800154c <HAL_RCC_OscConfig+0x4fc>)
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fadb 	bl	8000a0c <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145a:	f7ff fad7 	bl	8000a0c <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e067      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800146c:	4b35      	ldr	r3, [pc, #212]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d1f0      	bne.n	800145a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d108      	bne.n	8001494 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001482:	4b30      	ldr	r3, [pc, #192]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	492d      	ldr	r1, [pc, #180]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a19      	ldr	r1, [r3, #32]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	430b      	orrs	r3, r1
 80014a6:	4927      	ldr	r1, [pc, #156]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014ac:	4b27      	ldr	r3, [pc, #156]	; (800154c <HAL_RCC_OscConfig+0x4fc>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff faab 	bl	8000a0c <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff faa7 	bl	8000a0c <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e037      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x46a>
 80014d8:	e02f      	b.n	800153a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b1c      	ldr	r3, [pc, #112]	; (800154c <HAL_RCC_OscConfig+0x4fc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fa94 	bl	8000a0c <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff fa90 	bl	8000a0c <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e020      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014fa:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x498>
 8001506:	e018      	b.n	800153a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d101      	bne.n	8001514 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e013      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_RCC_OscConfig+0x4f4>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	429a      	cmp	r2, r3
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001532:	429a      	cmp	r2, r3
 8001534:	d001      	beq.n	800153a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000
 8001548:	40007000 	.word	0x40007000
 800154c:	42420060 	.word	0x42420060

08001550 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0d0      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001564:	4b6a      	ldr	r3, [pc, #424]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d910      	bls.n	8001594 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001572:	4b67      	ldr	r3, [pc, #412]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 0207 	bic.w	r2, r3, #7
 800157a:	4965      	ldr	r1, [pc, #404]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001582:	4b63      	ldr	r3, [pc, #396]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	429a      	cmp	r2, r3
 800158e:	d001      	beq.n	8001594 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0b8      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d020      	beq.n	80015e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d005      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015ac:	4b59      	ldr	r3, [pc, #356]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	4a58      	ldr	r2, [pc, #352]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c4:	4b53      	ldr	r3, [pc, #332]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4a52      	ldr	r2, [pc, #328]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	494d      	ldr	r1, [pc, #308]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d040      	beq.n	8001670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d107      	bne.n	8001606 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d115      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e07f      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d107      	bne.n	800161e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160e:	4b41      	ldr	r3, [pc, #260]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d109      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e073      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161e:	4b3d      	ldr	r3, [pc, #244]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e06b      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162e:	4b39      	ldr	r3, [pc, #228]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f023 0203 	bic.w	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4936      	ldr	r1, [pc, #216]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001640:	f7ff f9e4 	bl	8000a0c <HAL_GetTick>
 8001644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001646:	e00a      	b.n	800165e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001648:	f7ff f9e0 	bl	8000a0c <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	; 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e053      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 020c 	and.w	r2, r3, #12
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	429a      	cmp	r2, r3
 800166e:	d1eb      	bne.n	8001648 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001670:	4b27      	ldr	r3, [pc, #156]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d210      	bcs.n	80016a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b24      	ldr	r3, [pc, #144]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f023 0207 	bic.w	r2, r3, #7
 8001686:	4922      	ldr	r1, [pc, #136]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e032      	b.n	8001706 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d008      	beq.n	80016be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4916      	ldr	r1, [pc, #88]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0308 	and.w	r3, r3, #8
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d009      	beq.n	80016de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016ca:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	490e      	ldr	r1, [pc, #56]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016de:	f000 f821 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 80016e2:	4601      	mov	r1, r0
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	091b      	lsrs	r3, r3, #4
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <HAL_RCC_ClockConfig+0x1c8>)
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	fa21 f303 	lsr.w	r3, r1, r3
 80016f6:	4a09      	ldr	r2, [pc, #36]	; (800171c <HAL_RCC_ClockConfig+0x1cc>)
 80016f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_RCC_ClockConfig+0x1d0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff f942 	bl	8000988 <HAL_InitTick>

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40022000 	.word	0x40022000
 8001714:	40021000 	.word	0x40021000
 8001718:	08003408 	.word	0x08003408
 800171c:	2000000c 	.word	0x2000000c
 8001720:	20000010 	.word	0x20000010

08001724 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001724:	b490      	push	{r4, r7}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800172a:	4b2a      	ldr	r3, [pc, #168]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800172c:	1d3c      	adds	r4, r7, #4
 800172e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001734:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b04      	cmp	r3, #4
 800175c:	d002      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x40>
 800175e:	2b08      	cmp	r3, #8
 8001760:	d003      	beq.n	800176a <HAL_RCC_GetSysClockFreq+0x46>
 8001762:	e02d      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001764:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001766:	623b      	str	r3, [r7, #32]
      break;
 8001768:	e02d      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	0c9b      	lsrs	r3, r3, #18
 800176e:	f003 030f 	and.w	r3, r3, #15
 8001772:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001776:	4413      	add	r3, r2
 8001778:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800177c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d013      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	0c5b      	lsrs	r3, r3, #17
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001796:	4413      	add	r3, r2
 8001798:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800179c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017a2:	fb02 f203 	mul.w	r2, r2, r3
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
 80017ae:	e004      	b.n	80017ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	4a0c      	ldr	r2, [pc, #48]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017b4:	fb02 f303 	mul.w	r3, r2, r3
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	623b      	str	r3, [r7, #32]
      break;
 80017be:	e002      	b.n	80017c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017c2:	623b      	str	r3, [r7, #32]
      break;
 80017c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c6:	6a3b      	ldr	r3, [r7, #32]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3728      	adds	r7, #40	; 0x28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc90      	pop	{r4, r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	080033f4 	.word	0x080033f4
 80017d8:	08003404 	.word	0x08003404
 80017dc:	40021000 	.word	0x40021000
 80017e0:	007a1200 	.word	0x007a1200
 80017e4:	003d0900 	.word	0x003d0900

080017e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <RCC_Delay+0x34>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <RCC_Delay+0x38>)
 80017f6:	fba2 2303 	umull	r2, r3, r2, r3
 80017fa:	0a5b      	lsrs	r3, r3, #9
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	fb02 f303 	mul.w	r3, r2, r3
 8001802:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001804:	bf00      	nop
  }
  while (Delay --);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	1e5a      	subs	r2, r3, #1
 800180a:	60fa      	str	r2, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f9      	bne.n	8001804 <RCC_Delay+0x1c>
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	bc80      	pop	{r7}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	2000000c 	.word	0x2000000c
 8001820:	10624dd3 	.word	0x10624dd3

08001824 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e076      	b.n	8001924 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	2b00      	cmp	r3, #0
 800183c:	d108      	bne.n	8001850 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001846:	d009      	beq.n	800185c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
 800184e:	e005      	b.n	800185c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d106      	bne.n	800187c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7fe fea6 	bl	80005c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2202      	movs	r2, #2
 8001880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001892:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	431a      	orrs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e0:	ea42 0103 	orr.w	r1, r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	0c1a      	lsrs	r2, r3, #16
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f002 0204 	and.w	r2, r2, #4
 8001902:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	69da      	ldr	r2, [r3, #28]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001912:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2201      	movs	r2, #1
 800191e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	4613      	mov	r3, r2
 8001938:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001944:	2b01      	cmp	r3, #1
 8001946:	d101      	bne.n	800194c <HAL_SPI_Transmit_IT+0x20>
 8001948:	2302      	movs	r3, #2
 800194a:	e06f      	b.n	8001a2c <HAL_SPI_Transmit_IT+0x100>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if ((pData == NULL) || (Size == 0U))
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <HAL_SPI_Transmit_IT+0x34>
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001964:	e05d      	b.n	8001a22 <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b01      	cmp	r3, #1
 8001970:	d002      	beq.n	8001978 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8001972:	2302      	movs	r3, #2
 8001974:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001976:	e054      	b.n	8001a22 <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2203      	movs	r2, #3
 800197c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	68ba      	ldr	r2, [r7, #8]
 800198a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	88fa      	ldrh	r2, [r7, #6]
 8001990:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	88fa      	ldrh	r2, [r7, #6]
 8001996:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4a1f      	ldr	r2, [pc, #124]	; (8001a38 <HAL_SPI_Transmit_IT+0x10c>)
 80019bc:	645a      	str	r2, [r3, #68]	; 0x44
 80019be:	e002      	b.n	80019c6 <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <HAL_SPI_Transmit_IT+0x110>)
 80019c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019ce:	d10f      	bne.n	80019f0 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 80019fe:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a0a:	2b40      	cmp	r3, #64	; 0x40
 8001a0c:	d008      	beq.n	8001a20 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e000      	b.n	8001a22 <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8001a20:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	08002119 	.word	0x08002119
 8001a3c:	080020d3 	.word	0x080020d3

08001a40 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d110      	bne.n	8001a7c <HAL_SPI_Receive_IT+0x3c>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a62:	d10b      	bne.n	8001a7c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2204      	movs	r2, #4
 8001a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	68ba      	ldr	r2, [r7, #8]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f000 f882 	bl	8001b7c <HAL_SPI_TransmitReceive_IT>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	e076      	b.n	8001b6a <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_SPI_Receive_IT+0x4a>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e06f      	b.n	8001b6a <HAL_SPI_Receive_IT+0x12a>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d002      	beq.n	8001aa4 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001aa2:	e05d      	b.n	8001b60 <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <HAL_SPI_Receive_IT+0x70>
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d102      	bne.n	8001ab6 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001ab4:	e054      	b.n	8001b60 <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2204      	movs	r2, #4
 8001aba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	88fa      	ldrh	r2, [r7, #6]
 8001ace:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	88fa      	ldrh	r2, [r7, #6]
 8001ad4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <HAL_SPI_Receive_IT+0x134>)
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40
 8001afc:	e002      	b.n	8001b04 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <HAL_SPI_Receive_IT+0x138>)
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b0c:	d10f      	bne.n	8001b2e <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001b3c:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b48:	2b40      	cmp	r3, #64	; 0x40
 8001b4a:	d008      	beq.n	8001b5e <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	e000      	b.n	8001b60 <HAL_SPI_Receive_IT+0x120>
  }

error :
 8001b5e:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	0800208d 	.word	0x0800208d
 8001b78:	08002043 	.word	0x08002043

08001b7c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_SPI_TransmitReceive_IT+0x20>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e075      	b.n	8001c88 <HAL_SPI_TransmitReceive_IT+0x10c>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001baa:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001bb2:	7dbb      	ldrb	r3, [r7, #22]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d00d      	beq.n	8001bd4 <HAL_SPI_TransmitReceive_IT+0x58>
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bbe:	d106      	bne.n	8001bce <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <HAL_SPI_TransmitReceive_IT+0x52>
 8001bc8:	7dbb      	ldrb	r3, [r7, #22]
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d002      	beq.n	8001bd4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001bd2:	e054      	b.n	8001c7e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <HAL_SPI_TransmitReceive_IT+0x6a>
 8001be0:	887b      	ldrh	r3, [r7, #2]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d102      	bne.n	8001bec <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001bea:	e048      	b.n	8001c7e <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d003      	beq.n	8001c00 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2205      	movs	r2, #5
 8001bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	887a      	ldrh	r2, [r7, #2]
 8001c16:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	887a      	ldrh	r2, [r7, #2]
 8001c22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	887a      	ldrh	r2, [r7, #2]
 8001c28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d006      	beq.n	8001c40 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <HAL_SPI_TransmitReceive_IT+0x118>)
 8001c36:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4a17      	ldr	r2, [pc, #92]	; (8001c98 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8001c3c:	645a      	str	r2, [r3, #68]	; 0x44
 8001c3e:	e005      	b.n	8001c4c <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <HAL_SPI_TransmitReceive_IT+0x120>)
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4a15      	ldr	r2, [pc, #84]	; (8001ca0 <HAL_SPI_TransmitReceive_IT+0x124>)
 8001c4a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8001c5a:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c66:	2b40      	cmp	r3, #64	; 0x40
 8001c68:	d008      	beq.n	8001c7c <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	e000      	b.n	8001c7e <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8001c7c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	371c      	adds	r7, #28
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	08001f85 	.word	0x08001f85
 8001c98:	08001fe5 	.word	0x08001fe5
 8001c9c:	08001ec1 	.word	0x08001ec1
 8001ca0:	08001f25 	.word	0x08001f25

08001ca4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	099b      	lsrs	r3, r3, #6
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10f      	bne.n	8001ce8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d00a      	beq.n	8001ce8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	099b      	lsrs	r3, r3, #6
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d004      	beq.n	8001ce8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	4798      	blx	r3
    return;
 8001ce6:	e0bf      	b.n	8001e68 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	085b      	lsrs	r3, r3, #1
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d00a      	beq.n	8001d0a <HAL_SPI_IRQHandler+0x66>
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	09db      	lsrs	r3, r3, #7
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d004      	beq.n	8001d0a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	4798      	blx	r3
    return;
 8001d08:	e0ae      	b.n	8001e68 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	095b      	lsrs	r3, r3, #5
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d106      	bne.n	8001d24 <HAL_SPI_IRQHandler+0x80>
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	099b      	lsrs	r3, r3, #6
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 80a2 	beq.w	8001e68 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 809b 	beq.w	8001e68 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	099b      	lsrs	r3, r3, #6
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d023      	beq.n	8001d86 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d011      	beq.n	8001d6e <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4e:	f043 0204 	orr.w	r2, r3, #4
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	e00b      	b.n	8001d86 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]
        return;
 8001d84:	e070      	b.n	8001e68 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d014      	beq.n	8001dbc <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	f043 0201 	orr.w	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d050      	beq.n	8001e66 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001dd2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d104      	bne.n	8001df0 <HAL_SPI_IRQHandler+0x14c>
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d034      	beq.n	8001e5a <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0203 	bic.w	r2, r2, #3
 8001dfe:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d011      	beq.n	8001e2c <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0c:	4a18      	ldr	r2, [pc, #96]	; (8001e70 <HAL_SPI_IRQHandler+0x1cc>)
 8001e0e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe ff33 	bl	8000c80 <HAL_DMA_Abort_IT>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d016      	beq.n	8001e62 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <HAL_SPI_IRQHandler+0x1cc>)
 8001e3a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe ff1d 	bl	8000c80 <HAL_DMA_Abort_IT>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00a      	beq.n	8001e62 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8001e58:	e003      	b.n	8001e62 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f813 	bl	8001e86 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001e60:	e000      	b.n	8001e64 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8001e62:	bf00      	nop
    return;
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
  }
}
 8001e68:	3720      	adds	r7, #32
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	08001e99 	.word	0x08001e99

08001e74 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f7ff ffe7 	bl	8001e86 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001eb8:	bf00      	nop
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f103 020c 	add.w	r2, r3, #12
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed4:	7812      	ldrb	r2, [r2, #0]
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10f      	bne.n	8001f1c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f0a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fa18 	bl	800234c <SPI_CloseRxTx_ISR>
    }
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	330c      	adds	r3, #12
 8001f36:	7812      	ldrb	r2, [r2, #0]
 8001f38:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10f      	bne.n	8001f7c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f6a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f9e8 	bl	800234c <SPI_CloseRxTx_ISR>
    }
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	68da      	ldr	r2, [r3, #12]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	b292      	uxth	r2, r2
 8001f98:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9e:	1c9a      	adds	r2, r3, #2
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10f      	bne.n	8001fdc <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fca:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d102      	bne.n	8001fdc <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f9b8 	bl	800234c <SPI_CloseRxTx_ISR>
    }
  }
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	881a      	ldrh	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	1c9a      	adds	r2, r3, #2
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002006:	b29b      	uxth	r3, r3
 8002008:	3b01      	subs	r3, #1
 800200a:	b29a      	uxth	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002014:	b29b      	uxth	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10f      	bne.n	800203a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002028:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800202e:	b29b      	uxth	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f989 	bl	800234c <SPI_CloseRxTx_ISR>
    }
  }
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f103 020c 	add.w	r2, r3, #12
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002056:	7812      	ldrb	r2, [r2, #0]
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800206a:	b29b      	uxth	r3, r3
 800206c:	3b01      	subs	r3, #1
 800206e:	b29a      	uxth	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d102      	bne.n	8002084 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f9d8 	bl	8002434 <SPI_CloseRx_ISR>
  }
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209e:	b292      	uxth	r2, r2
 80020a0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	1c9a      	adds	r2, r3, #2
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }

#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020be:	b29b      	uxth	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f9b5 	bl	8002434 <SPI_CloseRx_ISR>
  }
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	330c      	adds	r3, #12
 80020e4:	7812      	ldrb	r2, [r2, #0]
 80020e6:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002104:	b29b      	uxth	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d102      	bne.n	8002110 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f9d2 	bl	80024b4 <SPI_CloseTx_ISR>
  }
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	881a      	ldrh	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	1c9a      	adds	r2, r3, #2
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800213a:	b29b      	uxth	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	b29a      	uxth	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002148:	b29b      	uxth	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f9b0 	bl	80024b4 <SPI_CloseTx_ISR>
  }
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	4613      	mov	r3, r2
 800216a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800216c:	f7fe fc4e 	bl	8000a0c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	4413      	add	r3, r2
 800217a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800217c:	f7fe fc46 	bl	8000a0c <HAL_GetTick>
 8002180:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002182:	4b39      	ldr	r3, [pc, #228]	; (8002268 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	015b      	lsls	r3, r3, #5
 8002188:	0d1b      	lsrs	r3, r3, #20
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	fb02 f303 	mul.w	r3, r2, r3
 8002190:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002192:	e054      	b.n	800223e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219a:	d050      	beq.n	800223e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800219c:	f7fe fc36 	bl	8000a0c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d902      	bls.n	80021b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d13d      	bne.n	800222e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021ca:	d111      	bne.n	80021f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021d4:	d004      	beq.n	80021e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021de:	d107      	bne.n	80021f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f8:	d10f      	bne.n	800221a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002218:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e017      	b.n	800225e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	3b01      	subs	r3, #1
 800223c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4013      	ands	r3, r2
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	429a      	cmp	r2, r3
 800224c:	bf0c      	ite	eq
 800224e:	2301      	moveq	r3, #1
 8002250:	2300      	movne	r3, #0
 8002252:	b2db      	uxtb	r3, r3
 8002254:	461a      	mov	r2, r3
 8002256:	79fb      	ldrb	r3, [r7, #7]
 8002258:	429a      	cmp	r2, r3
 800225a:	d19b      	bne.n	8002194 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3720      	adds	r7, #32
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	2000000c 	.word	0x2000000c

0800226c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002280:	d111      	bne.n	80022a6 <SPI_EndRxTransaction+0x3a>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800228a:	d004      	beq.n	8002296 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002294:	d107      	bne.n	80022a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022a4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022ae:	d117      	bne.n	80022e0 <SPI_EndRxTransaction+0x74>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b8:	d112      	bne.n	80022e0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2200      	movs	r2, #0
 80022c2:	2101      	movs	r1, #1
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f7ff ff49 	bl	800215c <SPI_WaitFlagStateUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d01a      	beq.n	8002306 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022d4:	f043 0220 	orr.w	r2, r3, #32
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e013      	b.n	8002308 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2200      	movs	r2, #0
 80022e8:	2180      	movs	r1, #128	; 0x80
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f7ff ff36 	bl	800215c <SPI_WaitFlagStateUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fa:	f043 0220 	orr.w	r2, r3, #32
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e000      	b.n	8002308 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af02      	add	r7, sp, #8
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2200      	movs	r2, #0
 8002324:	2180      	movs	r1, #128	; 0x80
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f7ff ff18 	bl	800215c <SPI_WaitFlagStateUntilTimeout>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	f043 0220 	orr.w	r2, r3, #32
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e000      	b.n	8002344 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8002354:	4b35      	ldr	r3, [pc, #212]	; (800242c <SPI_CloseRxTx_ISR+0xe0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a35      	ldr	r2, [pc, #212]	; (8002430 <SPI_CloseRxTx_ISR+0xe4>)
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	0a5b      	lsrs	r3, r3, #9
 8002360:	2264      	movs	r2, #100	; 0x64
 8002362:	fb02 f303 	mul.w	r3, r2, r3
 8002366:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002368:	f7fe fb50 	bl	8000a0c <HAL_GetTick>
 800236c:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0220 	bic.w	r2, r2, #32
 800237c:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d106      	bne.n	8002392 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002388:	f043 0220 	orr.w	r2, r3, #32
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002390:	e009      	b.n	80023a6 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	3b01      	subs	r3, #1
 8002396:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0eb      	beq.n	800237e <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	2164      	movs	r1, #100	; 0x64
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ffb0 	bl	8002310 <SPI_EndRxTxTransaction>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d005      	beq.n	80023c2 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f043 0220 	orr.w	r2, r3, #32
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10a      	bne.n	80023e0 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d115      	bne.n	8002414 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d107      	bne.n	8002404 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7fd fea5 	bl	800014c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002402:	e00e      	b.n	8002422 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7fd fedd 	bl	80001cc <HAL_SPI_TxRxCpltCallback>
}
 8002412:	e006      	b.n	8002422 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff fd32 	bl	8001e86 <HAL_SPI_ErrorCallback>
}
 8002422:	bf00      	nop
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	2000000c 	.word	0x2000000c
 8002430:	057619f1 	.word	0x057619f1

08002434 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800244a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800244c:	f7fe fade 	bl	8000a0c <HAL_GetTick>
 8002450:	4603      	mov	r3, r0
 8002452:	461a      	mov	r2, r3
 8002454:	2164      	movs	r1, #100	; 0x64
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff ff08 	bl	800226c <SPI_EndRxTransaction>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d005      	beq.n	800246e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	f043 0220 	orr.w	r2, r3, #32
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10a      	bne.n	800248c <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    }
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002498:	2b00      	cmp	r3, #0
 800249a:	d103      	bne.n	80024a4 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7fd fe55 	bl	800014c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80024a2:	e002      	b.n	80024aa <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff fcee 	bl	8001e86 <HAL_SPI_ErrorCallback>
}
 80024aa:	bf00      	nop
 80024ac:	3710      	adds	r7, #16
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80024bc:	4b2c      	ldr	r3, [pc, #176]	; (8002570 <SPI_CloseTx_ISR+0xbc>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a2c      	ldr	r2, [pc, #176]	; (8002574 <SPI_CloseTx_ISR+0xc0>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	0a5b      	lsrs	r3, r3, #9
 80024c8:	2264      	movs	r2, #100	; 0x64
 80024ca:	fb02 f303 	mul.w	r3, r2, r3
 80024ce:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024d0:	f7fe fa9c 	bl	8000a0c <HAL_GetTick>
 80024d4:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d106      	bne.n	80024ea <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e0:	f043 0220 	orr.w	r2, r3, #32
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80024e8:	e009      	b.n	80024fe <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	3b01      	subs	r3, #1
 80024ee:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0eb      	beq.n	80024d6 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800250c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	2164      	movs	r1, #100	; 0x64
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff fefc 	bl	8002310 <SPI_EndRxTxTransaction>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002522:	f043 0220 	orr.w	r2, r3, #32
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10a      	bne.n	8002548 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff fc94 	bl	8001e86 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800255e:	e002      	b.n	8002566 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7ff fc87 	bl	8001e74 <HAL_SPI_TxCpltCallback>
}
 8002566:	bf00      	nop
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	2000000c 	.word	0x2000000c
 8002574:	057619f1 	.word	0x057619f1

08002578 <__errno>:
 8002578:	4b01      	ldr	r3, [pc, #4]	; (8002580 <__errno+0x8>)
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000018 	.word	0x20000018

08002584 <__libc_init_array>:
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	2500      	movs	r5, #0
 8002588:	4e0c      	ldr	r6, [pc, #48]	; (80025bc <__libc_init_array+0x38>)
 800258a:	4c0d      	ldr	r4, [pc, #52]	; (80025c0 <__libc_init_array+0x3c>)
 800258c:	1ba4      	subs	r4, r4, r6
 800258e:	10a4      	asrs	r4, r4, #2
 8002590:	42a5      	cmp	r5, r4
 8002592:	d109      	bne.n	80025a8 <__libc_init_array+0x24>
 8002594:	f000 ff10 	bl	80033b8 <_init>
 8002598:	2500      	movs	r5, #0
 800259a:	4e0a      	ldr	r6, [pc, #40]	; (80025c4 <__libc_init_array+0x40>)
 800259c:	4c0a      	ldr	r4, [pc, #40]	; (80025c8 <__libc_init_array+0x44>)
 800259e:	1ba4      	subs	r4, r4, r6
 80025a0:	10a4      	asrs	r4, r4, #2
 80025a2:	42a5      	cmp	r5, r4
 80025a4:	d105      	bne.n	80025b2 <__libc_init_array+0x2e>
 80025a6:	bd70      	pop	{r4, r5, r6, pc}
 80025a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025ac:	4798      	blx	r3
 80025ae:	3501      	adds	r5, #1
 80025b0:	e7ee      	b.n	8002590 <__libc_init_array+0xc>
 80025b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025b6:	4798      	blx	r3
 80025b8:	3501      	adds	r5, #1
 80025ba:	e7f2      	b.n	80025a2 <__libc_init_array+0x1e>
 80025bc:	080034b0 	.word	0x080034b0
 80025c0:	080034b0 	.word	0x080034b0
 80025c4:	080034b0 	.word	0x080034b0
 80025c8:	080034b4 	.word	0x080034b4

080025cc <memset>:
 80025cc:	4603      	mov	r3, r0
 80025ce:	4402      	add	r2, r0
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d100      	bne.n	80025d6 <memset+0xa>
 80025d4:	4770      	bx	lr
 80025d6:	f803 1b01 	strb.w	r1, [r3], #1
 80025da:	e7f9      	b.n	80025d0 <memset+0x4>

080025dc <iprintf>:
 80025dc:	b40f      	push	{r0, r1, r2, r3}
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <iprintf+0x2c>)
 80025e0:	b513      	push	{r0, r1, r4, lr}
 80025e2:	681c      	ldr	r4, [r3, #0]
 80025e4:	b124      	cbz	r4, 80025f0 <iprintf+0x14>
 80025e6:	69a3      	ldr	r3, [r4, #24]
 80025e8:	b913      	cbnz	r3, 80025f0 <iprintf+0x14>
 80025ea:	4620      	mov	r0, r4
 80025ec:	f000 f84e 	bl	800268c <__sinit>
 80025f0:	ab05      	add	r3, sp, #20
 80025f2:	9a04      	ldr	r2, [sp, #16]
 80025f4:	68a1      	ldr	r1, [r4, #8]
 80025f6:	4620      	mov	r0, r4
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	f000 f953 	bl	80028a4 <_vfiprintf_r>
 80025fe:	b002      	add	sp, #8
 8002600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002604:	b004      	add	sp, #16
 8002606:	4770      	bx	lr
 8002608:	20000018 	.word	0x20000018

0800260c <std>:
 800260c:	2300      	movs	r3, #0
 800260e:	b510      	push	{r4, lr}
 8002610:	4604      	mov	r4, r0
 8002612:	e9c0 3300 	strd	r3, r3, [r0]
 8002616:	6083      	str	r3, [r0, #8]
 8002618:	8181      	strh	r1, [r0, #12]
 800261a:	6643      	str	r3, [r0, #100]	; 0x64
 800261c:	81c2      	strh	r2, [r0, #14]
 800261e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002622:	6183      	str	r3, [r0, #24]
 8002624:	4619      	mov	r1, r3
 8002626:	2208      	movs	r2, #8
 8002628:	305c      	adds	r0, #92	; 0x5c
 800262a:	f7ff ffcf 	bl	80025cc <memset>
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <std+0x38>)
 8002630:	6224      	str	r4, [r4, #32]
 8002632:	6263      	str	r3, [r4, #36]	; 0x24
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <std+0x3c>)
 8002636:	62a3      	str	r3, [r4, #40]	; 0x28
 8002638:	4b04      	ldr	r3, [pc, #16]	; (800264c <std+0x40>)
 800263a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800263c:	4b04      	ldr	r3, [pc, #16]	; (8002650 <std+0x44>)
 800263e:	6323      	str	r3, [r4, #48]	; 0x30
 8002640:	bd10      	pop	{r4, pc}
 8002642:	bf00      	nop
 8002644:	08002e01 	.word	0x08002e01
 8002648:	08002e23 	.word	0x08002e23
 800264c:	08002e5b 	.word	0x08002e5b
 8002650:	08002e7f 	.word	0x08002e7f

08002654 <_cleanup_r>:
 8002654:	4901      	ldr	r1, [pc, #4]	; (800265c <_cleanup_r+0x8>)
 8002656:	f000 b885 	b.w	8002764 <_fwalk_reent>
 800265a:	bf00      	nop
 800265c:	08003159 	.word	0x08003159

08002660 <__sfmoreglue>:
 8002660:	b570      	push	{r4, r5, r6, lr}
 8002662:	2568      	movs	r5, #104	; 0x68
 8002664:	1e4a      	subs	r2, r1, #1
 8002666:	4355      	muls	r5, r2
 8002668:	460e      	mov	r6, r1
 800266a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800266e:	f000 f897 	bl	80027a0 <_malloc_r>
 8002672:	4604      	mov	r4, r0
 8002674:	b140      	cbz	r0, 8002688 <__sfmoreglue+0x28>
 8002676:	2100      	movs	r1, #0
 8002678:	e9c0 1600 	strd	r1, r6, [r0]
 800267c:	300c      	adds	r0, #12
 800267e:	60a0      	str	r0, [r4, #8]
 8002680:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002684:	f7ff ffa2 	bl	80025cc <memset>
 8002688:	4620      	mov	r0, r4
 800268a:	bd70      	pop	{r4, r5, r6, pc}

0800268c <__sinit>:
 800268c:	6983      	ldr	r3, [r0, #24]
 800268e:	b510      	push	{r4, lr}
 8002690:	4604      	mov	r4, r0
 8002692:	bb33      	cbnz	r3, 80026e2 <__sinit+0x56>
 8002694:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002698:	6503      	str	r3, [r0, #80]	; 0x50
 800269a:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <__sinit+0x58>)
 800269c:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <__sinit+0x5c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6282      	str	r2, [r0, #40]	; 0x28
 80026a2:	4298      	cmp	r0, r3
 80026a4:	bf04      	itt	eq
 80026a6:	2301      	moveq	r3, #1
 80026a8:	6183      	streq	r3, [r0, #24]
 80026aa:	f000 f81f 	bl	80026ec <__sfp>
 80026ae:	6060      	str	r0, [r4, #4]
 80026b0:	4620      	mov	r0, r4
 80026b2:	f000 f81b 	bl	80026ec <__sfp>
 80026b6:	60a0      	str	r0, [r4, #8]
 80026b8:	4620      	mov	r0, r4
 80026ba:	f000 f817 	bl	80026ec <__sfp>
 80026be:	2200      	movs	r2, #0
 80026c0:	60e0      	str	r0, [r4, #12]
 80026c2:	2104      	movs	r1, #4
 80026c4:	6860      	ldr	r0, [r4, #4]
 80026c6:	f7ff ffa1 	bl	800260c <std>
 80026ca:	2201      	movs	r2, #1
 80026cc:	2109      	movs	r1, #9
 80026ce:	68a0      	ldr	r0, [r4, #8]
 80026d0:	f7ff ff9c 	bl	800260c <std>
 80026d4:	2202      	movs	r2, #2
 80026d6:	2112      	movs	r1, #18
 80026d8:	68e0      	ldr	r0, [r4, #12]
 80026da:	f7ff ff97 	bl	800260c <std>
 80026de:	2301      	movs	r3, #1
 80026e0:	61a3      	str	r3, [r4, #24]
 80026e2:	bd10      	pop	{r4, pc}
 80026e4:	08003418 	.word	0x08003418
 80026e8:	08002655 	.word	0x08002655

080026ec <__sfp>:
 80026ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ee:	4b1b      	ldr	r3, [pc, #108]	; (800275c <__sfp+0x70>)
 80026f0:	4607      	mov	r7, r0
 80026f2:	681e      	ldr	r6, [r3, #0]
 80026f4:	69b3      	ldr	r3, [r6, #24]
 80026f6:	b913      	cbnz	r3, 80026fe <__sfp+0x12>
 80026f8:	4630      	mov	r0, r6
 80026fa:	f7ff ffc7 	bl	800268c <__sinit>
 80026fe:	3648      	adds	r6, #72	; 0x48
 8002700:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002704:	3b01      	subs	r3, #1
 8002706:	d503      	bpl.n	8002710 <__sfp+0x24>
 8002708:	6833      	ldr	r3, [r6, #0]
 800270a:	b133      	cbz	r3, 800271a <__sfp+0x2e>
 800270c:	6836      	ldr	r6, [r6, #0]
 800270e:	e7f7      	b.n	8002700 <__sfp+0x14>
 8002710:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002714:	b16d      	cbz	r5, 8002732 <__sfp+0x46>
 8002716:	3468      	adds	r4, #104	; 0x68
 8002718:	e7f4      	b.n	8002704 <__sfp+0x18>
 800271a:	2104      	movs	r1, #4
 800271c:	4638      	mov	r0, r7
 800271e:	f7ff ff9f 	bl	8002660 <__sfmoreglue>
 8002722:	6030      	str	r0, [r6, #0]
 8002724:	2800      	cmp	r0, #0
 8002726:	d1f1      	bne.n	800270c <__sfp+0x20>
 8002728:	230c      	movs	r3, #12
 800272a:	4604      	mov	r4, r0
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	4620      	mov	r0, r4
 8002730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <__sfp+0x74>)
 8002734:	6665      	str	r5, [r4, #100]	; 0x64
 8002736:	e9c4 5500 	strd	r5, r5, [r4]
 800273a:	60a5      	str	r5, [r4, #8]
 800273c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002740:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002744:	2208      	movs	r2, #8
 8002746:	4629      	mov	r1, r5
 8002748:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800274c:	f7ff ff3e 	bl	80025cc <memset>
 8002750:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002754:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002758:	e7e9      	b.n	800272e <__sfp+0x42>
 800275a:	bf00      	nop
 800275c:	08003418 	.word	0x08003418
 8002760:	ffff0001 	.word	0xffff0001

08002764 <_fwalk_reent>:
 8002764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002768:	4680      	mov	r8, r0
 800276a:	4689      	mov	r9, r1
 800276c:	2600      	movs	r6, #0
 800276e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002772:	b914      	cbnz	r4, 800277a <_fwalk_reent+0x16>
 8002774:	4630      	mov	r0, r6
 8002776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800277a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800277e:	3f01      	subs	r7, #1
 8002780:	d501      	bpl.n	8002786 <_fwalk_reent+0x22>
 8002782:	6824      	ldr	r4, [r4, #0]
 8002784:	e7f5      	b.n	8002772 <_fwalk_reent+0xe>
 8002786:	89ab      	ldrh	r3, [r5, #12]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d907      	bls.n	800279c <_fwalk_reent+0x38>
 800278c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002790:	3301      	adds	r3, #1
 8002792:	d003      	beq.n	800279c <_fwalk_reent+0x38>
 8002794:	4629      	mov	r1, r5
 8002796:	4640      	mov	r0, r8
 8002798:	47c8      	blx	r9
 800279a:	4306      	orrs	r6, r0
 800279c:	3568      	adds	r5, #104	; 0x68
 800279e:	e7ee      	b.n	800277e <_fwalk_reent+0x1a>

080027a0 <_malloc_r>:
 80027a0:	b570      	push	{r4, r5, r6, lr}
 80027a2:	1ccd      	adds	r5, r1, #3
 80027a4:	f025 0503 	bic.w	r5, r5, #3
 80027a8:	3508      	adds	r5, #8
 80027aa:	2d0c      	cmp	r5, #12
 80027ac:	bf38      	it	cc
 80027ae:	250c      	movcc	r5, #12
 80027b0:	2d00      	cmp	r5, #0
 80027b2:	4606      	mov	r6, r0
 80027b4:	db01      	blt.n	80027ba <_malloc_r+0x1a>
 80027b6:	42a9      	cmp	r1, r5
 80027b8:	d903      	bls.n	80027c2 <_malloc_r+0x22>
 80027ba:	230c      	movs	r3, #12
 80027bc:	6033      	str	r3, [r6, #0]
 80027be:	2000      	movs	r0, #0
 80027c0:	bd70      	pop	{r4, r5, r6, pc}
 80027c2:	f000 fd77 	bl	80032b4 <__malloc_lock>
 80027c6:	4a21      	ldr	r2, [pc, #132]	; (800284c <_malloc_r+0xac>)
 80027c8:	6814      	ldr	r4, [r2, #0]
 80027ca:	4621      	mov	r1, r4
 80027cc:	b991      	cbnz	r1, 80027f4 <_malloc_r+0x54>
 80027ce:	4c20      	ldr	r4, [pc, #128]	; (8002850 <_malloc_r+0xb0>)
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	b91b      	cbnz	r3, 80027dc <_malloc_r+0x3c>
 80027d4:	4630      	mov	r0, r6
 80027d6:	f000 fb03 	bl	8002de0 <_sbrk_r>
 80027da:	6020      	str	r0, [r4, #0]
 80027dc:	4629      	mov	r1, r5
 80027de:	4630      	mov	r0, r6
 80027e0:	f000 fafe 	bl	8002de0 <_sbrk_r>
 80027e4:	1c43      	adds	r3, r0, #1
 80027e6:	d124      	bne.n	8002832 <_malloc_r+0x92>
 80027e8:	230c      	movs	r3, #12
 80027ea:	4630      	mov	r0, r6
 80027ec:	6033      	str	r3, [r6, #0]
 80027ee:	f000 fd62 	bl	80032b6 <__malloc_unlock>
 80027f2:	e7e4      	b.n	80027be <_malloc_r+0x1e>
 80027f4:	680b      	ldr	r3, [r1, #0]
 80027f6:	1b5b      	subs	r3, r3, r5
 80027f8:	d418      	bmi.n	800282c <_malloc_r+0x8c>
 80027fa:	2b0b      	cmp	r3, #11
 80027fc:	d90f      	bls.n	800281e <_malloc_r+0x7e>
 80027fe:	600b      	str	r3, [r1, #0]
 8002800:	18cc      	adds	r4, r1, r3
 8002802:	50cd      	str	r5, [r1, r3]
 8002804:	4630      	mov	r0, r6
 8002806:	f000 fd56 	bl	80032b6 <__malloc_unlock>
 800280a:	f104 000b 	add.w	r0, r4, #11
 800280e:	1d23      	adds	r3, r4, #4
 8002810:	f020 0007 	bic.w	r0, r0, #7
 8002814:	1ac3      	subs	r3, r0, r3
 8002816:	d0d3      	beq.n	80027c0 <_malloc_r+0x20>
 8002818:	425a      	negs	r2, r3
 800281a:	50e2      	str	r2, [r4, r3]
 800281c:	e7d0      	b.n	80027c0 <_malloc_r+0x20>
 800281e:	684b      	ldr	r3, [r1, #4]
 8002820:	428c      	cmp	r4, r1
 8002822:	bf16      	itet	ne
 8002824:	6063      	strne	r3, [r4, #4]
 8002826:	6013      	streq	r3, [r2, #0]
 8002828:	460c      	movne	r4, r1
 800282a:	e7eb      	b.n	8002804 <_malloc_r+0x64>
 800282c:	460c      	mov	r4, r1
 800282e:	6849      	ldr	r1, [r1, #4]
 8002830:	e7cc      	b.n	80027cc <_malloc_r+0x2c>
 8002832:	1cc4      	adds	r4, r0, #3
 8002834:	f024 0403 	bic.w	r4, r4, #3
 8002838:	42a0      	cmp	r0, r4
 800283a:	d005      	beq.n	8002848 <_malloc_r+0xa8>
 800283c:	1a21      	subs	r1, r4, r0
 800283e:	4630      	mov	r0, r6
 8002840:	f000 face 	bl	8002de0 <_sbrk_r>
 8002844:	3001      	adds	r0, #1
 8002846:	d0cf      	beq.n	80027e8 <_malloc_r+0x48>
 8002848:	6025      	str	r5, [r4, #0]
 800284a:	e7db      	b.n	8002804 <_malloc_r+0x64>
 800284c:	200000a0 	.word	0x200000a0
 8002850:	200000a4 	.word	0x200000a4

08002854 <__sfputc_r>:
 8002854:	6893      	ldr	r3, [r2, #8]
 8002856:	b410      	push	{r4}
 8002858:	3b01      	subs	r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	6093      	str	r3, [r2, #8]
 800285e:	da07      	bge.n	8002870 <__sfputc_r+0x1c>
 8002860:	6994      	ldr	r4, [r2, #24]
 8002862:	42a3      	cmp	r3, r4
 8002864:	db01      	blt.n	800286a <__sfputc_r+0x16>
 8002866:	290a      	cmp	r1, #10
 8002868:	d102      	bne.n	8002870 <__sfputc_r+0x1c>
 800286a:	bc10      	pop	{r4}
 800286c:	f000 bb0c 	b.w	8002e88 <__swbuf_r>
 8002870:	6813      	ldr	r3, [r2, #0]
 8002872:	1c58      	adds	r0, r3, #1
 8002874:	6010      	str	r0, [r2, #0]
 8002876:	7019      	strb	r1, [r3, #0]
 8002878:	4608      	mov	r0, r1
 800287a:	bc10      	pop	{r4}
 800287c:	4770      	bx	lr

0800287e <__sfputs_r>:
 800287e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002880:	4606      	mov	r6, r0
 8002882:	460f      	mov	r7, r1
 8002884:	4614      	mov	r4, r2
 8002886:	18d5      	adds	r5, r2, r3
 8002888:	42ac      	cmp	r4, r5
 800288a:	d101      	bne.n	8002890 <__sfputs_r+0x12>
 800288c:	2000      	movs	r0, #0
 800288e:	e007      	b.n	80028a0 <__sfputs_r+0x22>
 8002890:	463a      	mov	r2, r7
 8002892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002896:	4630      	mov	r0, r6
 8002898:	f7ff ffdc 	bl	8002854 <__sfputc_r>
 800289c:	1c43      	adds	r3, r0, #1
 800289e:	d1f3      	bne.n	8002888 <__sfputs_r+0xa>
 80028a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080028a4 <_vfiprintf_r>:
 80028a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028a8:	460c      	mov	r4, r1
 80028aa:	b09d      	sub	sp, #116	; 0x74
 80028ac:	4617      	mov	r7, r2
 80028ae:	461d      	mov	r5, r3
 80028b0:	4606      	mov	r6, r0
 80028b2:	b118      	cbz	r0, 80028bc <_vfiprintf_r+0x18>
 80028b4:	6983      	ldr	r3, [r0, #24]
 80028b6:	b90b      	cbnz	r3, 80028bc <_vfiprintf_r+0x18>
 80028b8:	f7ff fee8 	bl	800268c <__sinit>
 80028bc:	4b7c      	ldr	r3, [pc, #496]	; (8002ab0 <_vfiprintf_r+0x20c>)
 80028be:	429c      	cmp	r4, r3
 80028c0:	d158      	bne.n	8002974 <_vfiprintf_r+0xd0>
 80028c2:	6874      	ldr	r4, [r6, #4]
 80028c4:	89a3      	ldrh	r3, [r4, #12]
 80028c6:	0718      	lsls	r0, r3, #28
 80028c8:	d55e      	bpl.n	8002988 <_vfiprintf_r+0xe4>
 80028ca:	6923      	ldr	r3, [r4, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d05b      	beq.n	8002988 <_vfiprintf_r+0xe4>
 80028d0:	2300      	movs	r3, #0
 80028d2:	9309      	str	r3, [sp, #36]	; 0x24
 80028d4:	2320      	movs	r3, #32
 80028d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028da:	2330      	movs	r3, #48	; 0x30
 80028dc:	f04f 0b01 	mov.w	fp, #1
 80028e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028e4:	9503      	str	r5, [sp, #12]
 80028e6:	46b8      	mov	r8, r7
 80028e8:	4645      	mov	r5, r8
 80028ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80028ee:	b10b      	cbz	r3, 80028f4 <_vfiprintf_r+0x50>
 80028f0:	2b25      	cmp	r3, #37	; 0x25
 80028f2:	d154      	bne.n	800299e <_vfiprintf_r+0xfa>
 80028f4:	ebb8 0a07 	subs.w	sl, r8, r7
 80028f8:	d00b      	beq.n	8002912 <_vfiprintf_r+0x6e>
 80028fa:	4653      	mov	r3, sl
 80028fc:	463a      	mov	r2, r7
 80028fe:	4621      	mov	r1, r4
 8002900:	4630      	mov	r0, r6
 8002902:	f7ff ffbc 	bl	800287e <__sfputs_r>
 8002906:	3001      	adds	r0, #1
 8002908:	f000 80c2 	beq.w	8002a90 <_vfiprintf_r+0x1ec>
 800290c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800290e:	4453      	add	r3, sl
 8002910:	9309      	str	r3, [sp, #36]	; 0x24
 8002912:	f898 3000 	ldrb.w	r3, [r8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80ba 	beq.w	8002a90 <_vfiprintf_r+0x1ec>
 800291c:	2300      	movs	r3, #0
 800291e:	f04f 32ff 	mov.w	r2, #4294967295
 8002922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002926:	9304      	str	r3, [sp, #16]
 8002928:	9307      	str	r3, [sp, #28]
 800292a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800292e:	931a      	str	r3, [sp, #104]	; 0x68
 8002930:	46a8      	mov	r8, r5
 8002932:	2205      	movs	r2, #5
 8002934:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002938:	485e      	ldr	r0, [pc, #376]	; (8002ab4 <_vfiprintf_r+0x210>)
 800293a:	f000 fcad 	bl	8003298 <memchr>
 800293e:	9b04      	ldr	r3, [sp, #16]
 8002940:	bb78      	cbnz	r0, 80029a2 <_vfiprintf_r+0xfe>
 8002942:	06d9      	lsls	r1, r3, #27
 8002944:	bf44      	itt	mi
 8002946:	2220      	movmi	r2, #32
 8002948:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800294c:	071a      	lsls	r2, r3, #28
 800294e:	bf44      	itt	mi
 8002950:	222b      	movmi	r2, #43	; 0x2b
 8002952:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002956:	782a      	ldrb	r2, [r5, #0]
 8002958:	2a2a      	cmp	r2, #42	; 0x2a
 800295a:	d02a      	beq.n	80029b2 <_vfiprintf_r+0x10e>
 800295c:	46a8      	mov	r8, r5
 800295e:	2000      	movs	r0, #0
 8002960:	250a      	movs	r5, #10
 8002962:	9a07      	ldr	r2, [sp, #28]
 8002964:	4641      	mov	r1, r8
 8002966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800296a:	3b30      	subs	r3, #48	; 0x30
 800296c:	2b09      	cmp	r3, #9
 800296e:	d969      	bls.n	8002a44 <_vfiprintf_r+0x1a0>
 8002970:	b360      	cbz	r0, 80029cc <_vfiprintf_r+0x128>
 8002972:	e024      	b.n	80029be <_vfiprintf_r+0x11a>
 8002974:	4b50      	ldr	r3, [pc, #320]	; (8002ab8 <_vfiprintf_r+0x214>)
 8002976:	429c      	cmp	r4, r3
 8002978:	d101      	bne.n	800297e <_vfiprintf_r+0xda>
 800297a:	68b4      	ldr	r4, [r6, #8]
 800297c:	e7a2      	b.n	80028c4 <_vfiprintf_r+0x20>
 800297e:	4b4f      	ldr	r3, [pc, #316]	; (8002abc <_vfiprintf_r+0x218>)
 8002980:	429c      	cmp	r4, r3
 8002982:	bf08      	it	eq
 8002984:	68f4      	ldreq	r4, [r6, #12]
 8002986:	e79d      	b.n	80028c4 <_vfiprintf_r+0x20>
 8002988:	4621      	mov	r1, r4
 800298a:	4630      	mov	r0, r6
 800298c:	f000 fae0 	bl	8002f50 <__swsetup_r>
 8002990:	2800      	cmp	r0, #0
 8002992:	d09d      	beq.n	80028d0 <_vfiprintf_r+0x2c>
 8002994:	f04f 30ff 	mov.w	r0, #4294967295
 8002998:	b01d      	add	sp, #116	; 0x74
 800299a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800299e:	46a8      	mov	r8, r5
 80029a0:	e7a2      	b.n	80028e8 <_vfiprintf_r+0x44>
 80029a2:	4a44      	ldr	r2, [pc, #272]	; (8002ab4 <_vfiprintf_r+0x210>)
 80029a4:	4645      	mov	r5, r8
 80029a6:	1a80      	subs	r0, r0, r2
 80029a8:	fa0b f000 	lsl.w	r0, fp, r0
 80029ac:	4318      	orrs	r0, r3
 80029ae:	9004      	str	r0, [sp, #16]
 80029b0:	e7be      	b.n	8002930 <_vfiprintf_r+0x8c>
 80029b2:	9a03      	ldr	r2, [sp, #12]
 80029b4:	1d11      	adds	r1, r2, #4
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	9103      	str	r1, [sp, #12]
 80029ba:	2a00      	cmp	r2, #0
 80029bc:	db01      	blt.n	80029c2 <_vfiprintf_r+0x11e>
 80029be:	9207      	str	r2, [sp, #28]
 80029c0:	e004      	b.n	80029cc <_vfiprintf_r+0x128>
 80029c2:	4252      	negs	r2, r2
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	9207      	str	r2, [sp, #28]
 80029ca:	9304      	str	r3, [sp, #16]
 80029cc:	f898 3000 	ldrb.w	r3, [r8]
 80029d0:	2b2e      	cmp	r3, #46	; 0x2e
 80029d2:	d10e      	bne.n	80029f2 <_vfiprintf_r+0x14e>
 80029d4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80029d8:	2b2a      	cmp	r3, #42	; 0x2a
 80029da:	d138      	bne.n	8002a4e <_vfiprintf_r+0x1aa>
 80029dc:	9b03      	ldr	r3, [sp, #12]
 80029de:	f108 0802 	add.w	r8, r8, #2
 80029e2:	1d1a      	adds	r2, r3, #4
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	9203      	str	r2, [sp, #12]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bfb8      	it	lt
 80029ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80029f0:	9305      	str	r3, [sp, #20]
 80029f2:	4d33      	ldr	r5, [pc, #204]	; (8002ac0 <_vfiprintf_r+0x21c>)
 80029f4:	2203      	movs	r2, #3
 80029f6:	f898 1000 	ldrb.w	r1, [r8]
 80029fa:	4628      	mov	r0, r5
 80029fc:	f000 fc4c 	bl	8003298 <memchr>
 8002a00:	b140      	cbz	r0, 8002a14 <_vfiprintf_r+0x170>
 8002a02:	2340      	movs	r3, #64	; 0x40
 8002a04:	1b40      	subs	r0, r0, r5
 8002a06:	fa03 f000 	lsl.w	r0, r3, r0
 8002a0a:	9b04      	ldr	r3, [sp, #16]
 8002a0c:	f108 0801 	add.w	r8, r8, #1
 8002a10:	4303      	orrs	r3, r0
 8002a12:	9304      	str	r3, [sp, #16]
 8002a14:	f898 1000 	ldrb.w	r1, [r8]
 8002a18:	2206      	movs	r2, #6
 8002a1a:	482a      	ldr	r0, [pc, #168]	; (8002ac4 <_vfiprintf_r+0x220>)
 8002a1c:	f108 0701 	add.w	r7, r8, #1
 8002a20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a24:	f000 fc38 	bl	8003298 <memchr>
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	d037      	beq.n	8002a9c <_vfiprintf_r+0x1f8>
 8002a2c:	4b26      	ldr	r3, [pc, #152]	; (8002ac8 <_vfiprintf_r+0x224>)
 8002a2e:	bb1b      	cbnz	r3, 8002a78 <_vfiprintf_r+0x1d4>
 8002a30:	9b03      	ldr	r3, [sp, #12]
 8002a32:	3307      	adds	r3, #7
 8002a34:	f023 0307 	bic.w	r3, r3, #7
 8002a38:	3308      	adds	r3, #8
 8002a3a:	9303      	str	r3, [sp, #12]
 8002a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a3e:	444b      	add	r3, r9
 8002a40:	9309      	str	r3, [sp, #36]	; 0x24
 8002a42:	e750      	b.n	80028e6 <_vfiprintf_r+0x42>
 8002a44:	fb05 3202 	mla	r2, r5, r2, r3
 8002a48:	2001      	movs	r0, #1
 8002a4a:	4688      	mov	r8, r1
 8002a4c:	e78a      	b.n	8002964 <_vfiprintf_r+0xc0>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	250a      	movs	r5, #10
 8002a52:	4619      	mov	r1, r3
 8002a54:	f108 0801 	add.w	r8, r8, #1
 8002a58:	9305      	str	r3, [sp, #20]
 8002a5a:	4640      	mov	r0, r8
 8002a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a60:	3a30      	subs	r2, #48	; 0x30
 8002a62:	2a09      	cmp	r2, #9
 8002a64:	d903      	bls.n	8002a6e <_vfiprintf_r+0x1ca>
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0c3      	beq.n	80029f2 <_vfiprintf_r+0x14e>
 8002a6a:	9105      	str	r1, [sp, #20]
 8002a6c:	e7c1      	b.n	80029f2 <_vfiprintf_r+0x14e>
 8002a6e:	fb05 2101 	mla	r1, r5, r1, r2
 8002a72:	2301      	movs	r3, #1
 8002a74:	4680      	mov	r8, r0
 8002a76:	e7f0      	b.n	8002a5a <_vfiprintf_r+0x1b6>
 8002a78:	ab03      	add	r3, sp, #12
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	4622      	mov	r2, r4
 8002a7e:	4b13      	ldr	r3, [pc, #76]	; (8002acc <_vfiprintf_r+0x228>)
 8002a80:	a904      	add	r1, sp, #16
 8002a82:	4630      	mov	r0, r6
 8002a84:	f3af 8000 	nop.w
 8002a88:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002a8c:	4681      	mov	r9, r0
 8002a8e:	d1d5      	bne.n	8002a3c <_vfiprintf_r+0x198>
 8002a90:	89a3      	ldrh	r3, [r4, #12]
 8002a92:	065b      	lsls	r3, r3, #25
 8002a94:	f53f af7e 	bmi.w	8002994 <_vfiprintf_r+0xf0>
 8002a98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a9a:	e77d      	b.n	8002998 <_vfiprintf_r+0xf4>
 8002a9c:	ab03      	add	r3, sp, #12
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	4622      	mov	r2, r4
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <_vfiprintf_r+0x228>)
 8002aa4:	a904      	add	r1, sp, #16
 8002aa6:	4630      	mov	r0, r6
 8002aa8:	f000 f888 	bl	8002bbc <_printf_i>
 8002aac:	e7ec      	b.n	8002a88 <_vfiprintf_r+0x1e4>
 8002aae:	bf00      	nop
 8002ab0:	0800343c 	.word	0x0800343c
 8002ab4:	0800347c 	.word	0x0800347c
 8002ab8:	0800345c 	.word	0x0800345c
 8002abc:	0800341c 	.word	0x0800341c
 8002ac0:	08003482 	.word	0x08003482
 8002ac4:	08003486 	.word	0x08003486
 8002ac8:	00000000 	.word	0x00000000
 8002acc:	0800287f 	.word	0x0800287f

08002ad0 <_printf_common>:
 8002ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ad4:	4691      	mov	r9, r2
 8002ad6:	461f      	mov	r7, r3
 8002ad8:	688a      	ldr	r2, [r1, #8]
 8002ada:	690b      	ldr	r3, [r1, #16]
 8002adc:	4606      	mov	r6, r0
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	bfb8      	it	lt
 8002ae2:	4613      	movlt	r3, r2
 8002ae4:	f8c9 3000 	str.w	r3, [r9]
 8002ae8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002aec:	460c      	mov	r4, r1
 8002aee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002af2:	b112      	cbz	r2, 8002afa <_printf_common+0x2a>
 8002af4:	3301      	adds	r3, #1
 8002af6:	f8c9 3000 	str.w	r3, [r9]
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	0699      	lsls	r1, r3, #26
 8002afe:	bf42      	ittt	mi
 8002b00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002b04:	3302      	addmi	r3, #2
 8002b06:	f8c9 3000 	strmi.w	r3, [r9]
 8002b0a:	6825      	ldr	r5, [r4, #0]
 8002b0c:	f015 0506 	ands.w	r5, r5, #6
 8002b10:	d107      	bne.n	8002b22 <_printf_common+0x52>
 8002b12:	f104 0a19 	add.w	sl, r4, #25
 8002b16:	68e3      	ldr	r3, [r4, #12]
 8002b18:	f8d9 2000 	ldr.w	r2, [r9]
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	42ab      	cmp	r3, r5
 8002b20:	dc29      	bgt.n	8002b76 <_printf_common+0xa6>
 8002b22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002b26:	6822      	ldr	r2, [r4, #0]
 8002b28:	3300      	adds	r3, #0
 8002b2a:	bf18      	it	ne
 8002b2c:	2301      	movne	r3, #1
 8002b2e:	0692      	lsls	r2, r2, #26
 8002b30:	d42e      	bmi.n	8002b90 <_printf_common+0xc0>
 8002b32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b36:	4639      	mov	r1, r7
 8002b38:	4630      	mov	r0, r6
 8002b3a:	47c0      	blx	r8
 8002b3c:	3001      	adds	r0, #1
 8002b3e:	d021      	beq.n	8002b84 <_printf_common+0xb4>
 8002b40:	6823      	ldr	r3, [r4, #0]
 8002b42:	68e5      	ldr	r5, [r4, #12]
 8002b44:	f003 0306 	and.w	r3, r3, #6
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	bf18      	it	ne
 8002b4c:	2500      	movne	r5, #0
 8002b4e:	f8d9 2000 	ldr.w	r2, [r9]
 8002b52:	f04f 0900 	mov.w	r9, #0
 8002b56:	bf08      	it	eq
 8002b58:	1aad      	subeq	r5, r5, r2
 8002b5a:	68a3      	ldr	r3, [r4, #8]
 8002b5c:	6922      	ldr	r2, [r4, #16]
 8002b5e:	bf08      	it	eq
 8002b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b64:	4293      	cmp	r3, r2
 8002b66:	bfc4      	itt	gt
 8002b68:	1a9b      	subgt	r3, r3, r2
 8002b6a:	18ed      	addgt	r5, r5, r3
 8002b6c:	341a      	adds	r4, #26
 8002b6e:	454d      	cmp	r5, r9
 8002b70:	d11a      	bne.n	8002ba8 <_printf_common+0xd8>
 8002b72:	2000      	movs	r0, #0
 8002b74:	e008      	b.n	8002b88 <_printf_common+0xb8>
 8002b76:	2301      	movs	r3, #1
 8002b78:	4652      	mov	r2, sl
 8002b7a:	4639      	mov	r1, r7
 8002b7c:	4630      	mov	r0, r6
 8002b7e:	47c0      	blx	r8
 8002b80:	3001      	adds	r0, #1
 8002b82:	d103      	bne.n	8002b8c <_printf_common+0xbc>
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295
 8002b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b8c:	3501      	adds	r5, #1
 8002b8e:	e7c2      	b.n	8002b16 <_printf_common+0x46>
 8002b90:	2030      	movs	r0, #48	; 0x30
 8002b92:	18e1      	adds	r1, r4, r3
 8002b94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b9e:	4422      	add	r2, r4
 8002ba0:	3302      	adds	r3, #2
 8002ba2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002ba6:	e7c4      	b.n	8002b32 <_printf_common+0x62>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	4622      	mov	r2, r4
 8002bac:	4639      	mov	r1, r7
 8002bae:	4630      	mov	r0, r6
 8002bb0:	47c0      	blx	r8
 8002bb2:	3001      	adds	r0, #1
 8002bb4:	d0e6      	beq.n	8002b84 <_printf_common+0xb4>
 8002bb6:	f109 0901 	add.w	r9, r9, #1
 8002bba:	e7d8      	b.n	8002b6e <_printf_common+0x9e>

08002bbc <_printf_i>:
 8002bbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002bc0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002bc4:	460c      	mov	r4, r1
 8002bc6:	7e09      	ldrb	r1, [r1, #24]
 8002bc8:	b085      	sub	sp, #20
 8002bca:	296e      	cmp	r1, #110	; 0x6e
 8002bcc:	4617      	mov	r7, r2
 8002bce:	4606      	mov	r6, r0
 8002bd0:	4698      	mov	r8, r3
 8002bd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002bd4:	f000 80b3 	beq.w	8002d3e <_printf_i+0x182>
 8002bd8:	d822      	bhi.n	8002c20 <_printf_i+0x64>
 8002bda:	2963      	cmp	r1, #99	; 0x63
 8002bdc:	d036      	beq.n	8002c4c <_printf_i+0x90>
 8002bde:	d80a      	bhi.n	8002bf6 <_printf_i+0x3a>
 8002be0:	2900      	cmp	r1, #0
 8002be2:	f000 80b9 	beq.w	8002d58 <_printf_i+0x19c>
 8002be6:	2958      	cmp	r1, #88	; 0x58
 8002be8:	f000 8083 	beq.w	8002cf2 <_printf_i+0x136>
 8002bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bf0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002bf4:	e032      	b.n	8002c5c <_printf_i+0xa0>
 8002bf6:	2964      	cmp	r1, #100	; 0x64
 8002bf8:	d001      	beq.n	8002bfe <_printf_i+0x42>
 8002bfa:	2969      	cmp	r1, #105	; 0x69
 8002bfc:	d1f6      	bne.n	8002bec <_printf_i+0x30>
 8002bfe:	6820      	ldr	r0, [r4, #0]
 8002c00:	6813      	ldr	r3, [r2, #0]
 8002c02:	0605      	lsls	r5, r0, #24
 8002c04:	f103 0104 	add.w	r1, r3, #4
 8002c08:	d52a      	bpl.n	8002c60 <_printf_i+0xa4>
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6011      	str	r1, [r2, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	da03      	bge.n	8002c1a <_printf_i+0x5e>
 8002c12:	222d      	movs	r2, #45	; 0x2d
 8002c14:	425b      	negs	r3, r3
 8002c16:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002c1a:	486f      	ldr	r0, [pc, #444]	; (8002dd8 <_printf_i+0x21c>)
 8002c1c:	220a      	movs	r2, #10
 8002c1e:	e039      	b.n	8002c94 <_printf_i+0xd8>
 8002c20:	2973      	cmp	r1, #115	; 0x73
 8002c22:	f000 809d 	beq.w	8002d60 <_printf_i+0x1a4>
 8002c26:	d808      	bhi.n	8002c3a <_printf_i+0x7e>
 8002c28:	296f      	cmp	r1, #111	; 0x6f
 8002c2a:	d020      	beq.n	8002c6e <_printf_i+0xb2>
 8002c2c:	2970      	cmp	r1, #112	; 0x70
 8002c2e:	d1dd      	bne.n	8002bec <_printf_i+0x30>
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	f043 0320 	orr.w	r3, r3, #32
 8002c36:	6023      	str	r3, [r4, #0]
 8002c38:	e003      	b.n	8002c42 <_printf_i+0x86>
 8002c3a:	2975      	cmp	r1, #117	; 0x75
 8002c3c:	d017      	beq.n	8002c6e <_printf_i+0xb2>
 8002c3e:	2978      	cmp	r1, #120	; 0x78
 8002c40:	d1d4      	bne.n	8002bec <_printf_i+0x30>
 8002c42:	2378      	movs	r3, #120	; 0x78
 8002c44:	4865      	ldr	r0, [pc, #404]	; (8002ddc <_printf_i+0x220>)
 8002c46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c4a:	e055      	b.n	8002cf8 <_printf_i+0x13c>
 8002c4c:	6813      	ldr	r3, [r2, #0]
 8002c4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c52:	1d19      	adds	r1, r3, #4
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6011      	str	r1, [r2, #0]
 8002c58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e08c      	b.n	8002d7a <_printf_i+0x1be>
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c66:	6011      	str	r1, [r2, #0]
 8002c68:	bf18      	it	ne
 8002c6a:	b21b      	sxthne	r3, r3
 8002c6c:	e7cf      	b.n	8002c0e <_printf_i+0x52>
 8002c6e:	6813      	ldr	r3, [r2, #0]
 8002c70:	6825      	ldr	r5, [r4, #0]
 8002c72:	1d18      	adds	r0, r3, #4
 8002c74:	6010      	str	r0, [r2, #0]
 8002c76:	0628      	lsls	r0, r5, #24
 8002c78:	d501      	bpl.n	8002c7e <_printf_i+0xc2>
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	e002      	b.n	8002c84 <_printf_i+0xc8>
 8002c7e:	0668      	lsls	r0, r5, #25
 8002c80:	d5fb      	bpl.n	8002c7a <_printf_i+0xbe>
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	296f      	cmp	r1, #111	; 0x6f
 8002c86:	bf14      	ite	ne
 8002c88:	220a      	movne	r2, #10
 8002c8a:	2208      	moveq	r2, #8
 8002c8c:	4852      	ldr	r0, [pc, #328]	; (8002dd8 <_printf_i+0x21c>)
 8002c8e:	2100      	movs	r1, #0
 8002c90:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c94:	6865      	ldr	r5, [r4, #4]
 8002c96:	2d00      	cmp	r5, #0
 8002c98:	60a5      	str	r5, [r4, #8]
 8002c9a:	f2c0 8095 	blt.w	8002dc8 <_printf_i+0x20c>
 8002c9e:	6821      	ldr	r1, [r4, #0]
 8002ca0:	f021 0104 	bic.w	r1, r1, #4
 8002ca4:	6021      	str	r1, [r4, #0]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d13d      	bne.n	8002d26 <_printf_i+0x16a>
 8002caa:	2d00      	cmp	r5, #0
 8002cac:	f040 808e 	bne.w	8002dcc <_printf_i+0x210>
 8002cb0:	4665      	mov	r5, ip
 8002cb2:	2a08      	cmp	r2, #8
 8002cb4:	d10b      	bne.n	8002cce <_printf_i+0x112>
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	07db      	lsls	r3, r3, #31
 8002cba:	d508      	bpl.n	8002cce <_printf_i+0x112>
 8002cbc:	6923      	ldr	r3, [r4, #16]
 8002cbe:	6862      	ldr	r2, [r4, #4]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	bfde      	ittt	le
 8002cc4:	2330      	movle	r3, #48	; 0x30
 8002cc6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002cca:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002cce:	ebac 0305 	sub.w	r3, ip, r5
 8002cd2:	6123      	str	r3, [r4, #16]
 8002cd4:	f8cd 8000 	str.w	r8, [sp]
 8002cd8:	463b      	mov	r3, r7
 8002cda:	aa03      	add	r2, sp, #12
 8002cdc:	4621      	mov	r1, r4
 8002cde:	4630      	mov	r0, r6
 8002ce0:	f7ff fef6 	bl	8002ad0 <_printf_common>
 8002ce4:	3001      	adds	r0, #1
 8002ce6:	d14d      	bne.n	8002d84 <_printf_i+0x1c8>
 8002ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cec:	b005      	add	sp, #20
 8002cee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cf2:	4839      	ldr	r0, [pc, #228]	; (8002dd8 <_printf_i+0x21c>)
 8002cf4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002cf8:	6813      	ldr	r3, [r2, #0]
 8002cfa:	6821      	ldr	r1, [r4, #0]
 8002cfc:	1d1d      	adds	r5, r3, #4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6015      	str	r5, [r2, #0]
 8002d02:	060a      	lsls	r2, r1, #24
 8002d04:	d50b      	bpl.n	8002d1e <_printf_i+0x162>
 8002d06:	07ca      	lsls	r2, r1, #31
 8002d08:	bf44      	itt	mi
 8002d0a:	f041 0120 	orrmi.w	r1, r1, #32
 8002d0e:	6021      	strmi	r1, [r4, #0]
 8002d10:	b91b      	cbnz	r3, 8002d1a <_printf_i+0x15e>
 8002d12:	6822      	ldr	r2, [r4, #0]
 8002d14:	f022 0220 	bic.w	r2, r2, #32
 8002d18:	6022      	str	r2, [r4, #0]
 8002d1a:	2210      	movs	r2, #16
 8002d1c:	e7b7      	b.n	8002c8e <_printf_i+0xd2>
 8002d1e:	064d      	lsls	r5, r1, #25
 8002d20:	bf48      	it	mi
 8002d22:	b29b      	uxthmi	r3, r3
 8002d24:	e7ef      	b.n	8002d06 <_printf_i+0x14a>
 8002d26:	4665      	mov	r5, ip
 8002d28:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d2c:	fb02 3311 	mls	r3, r2, r1, r3
 8002d30:	5cc3      	ldrb	r3, [r0, r3]
 8002d32:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002d36:	460b      	mov	r3, r1
 8002d38:	2900      	cmp	r1, #0
 8002d3a:	d1f5      	bne.n	8002d28 <_printf_i+0x16c>
 8002d3c:	e7b9      	b.n	8002cb2 <_printf_i+0xf6>
 8002d3e:	6813      	ldr	r3, [r2, #0]
 8002d40:	6825      	ldr	r5, [r4, #0]
 8002d42:	1d18      	adds	r0, r3, #4
 8002d44:	6961      	ldr	r1, [r4, #20]
 8002d46:	6010      	str	r0, [r2, #0]
 8002d48:	0628      	lsls	r0, r5, #24
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	d501      	bpl.n	8002d52 <_printf_i+0x196>
 8002d4e:	6019      	str	r1, [r3, #0]
 8002d50:	e002      	b.n	8002d58 <_printf_i+0x19c>
 8002d52:	066a      	lsls	r2, r5, #25
 8002d54:	d5fb      	bpl.n	8002d4e <_printf_i+0x192>
 8002d56:	8019      	strh	r1, [r3, #0]
 8002d58:	2300      	movs	r3, #0
 8002d5a:	4665      	mov	r5, ip
 8002d5c:	6123      	str	r3, [r4, #16]
 8002d5e:	e7b9      	b.n	8002cd4 <_printf_i+0x118>
 8002d60:	6813      	ldr	r3, [r2, #0]
 8002d62:	1d19      	adds	r1, r3, #4
 8002d64:	6011      	str	r1, [r2, #0]
 8002d66:	681d      	ldr	r5, [r3, #0]
 8002d68:	6862      	ldr	r2, [r4, #4]
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	f000 fa93 	bl	8003298 <memchr>
 8002d72:	b108      	cbz	r0, 8002d78 <_printf_i+0x1bc>
 8002d74:	1b40      	subs	r0, r0, r5
 8002d76:	6060      	str	r0, [r4, #4]
 8002d78:	6863      	ldr	r3, [r4, #4]
 8002d7a:	6123      	str	r3, [r4, #16]
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d82:	e7a7      	b.n	8002cd4 <_printf_i+0x118>
 8002d84:	6923      	ldr	r3, [r4, #16]
 8002d86:	462a      	mov	r2, r5
 8002d88:	4639      	mov	r1, r7
 8002d8a:	4630      	mov	r0, r6
 8002d8c:	47c0      	blx	r8
 8002d8e:	3001      	adds	r0, #1
 8002d90:	d0aa      	beq.n	8002ce8 <_printf_i+0x12c>
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	079b      	lsls	r3, r3, #30
 8002d96:	d413      	bmi.n	8002dc0 <_printf_i+0x204>
 8002d98:	68e0      	ldr	r0, [r4, #12]
 8002d9a:	9b03      	ldr	r3, [sp, #12]
 8002d9c:	4298      	cmp	r0, r3
 8002d9e:	bfb8      	it	lt
 8002da0:	4618      	movlt	r0, r3
 8002da2:	e7a3      	b.n	8002cec <_printf_i+0x130>
 8002da4:	2301      	movs	r3, #1
 8002da6:	464a      	mov	r2, r9
 8002da8:	4639      	mov	r1, r7
 8002daa:	4630      	mov	r0, r6
 8002dac:	47c0      	blx	r8
 8002dae:	3001      	adds	r0, #1
 8002db0:	d09a      	beq.n	8002ce8 <_printf_i+0x12c>
 8002db2:	3501      	adds	r5, #1
 8002db4:	68e3      	ldr	r3, [r4, #12]
 8002db6:	9a03      	ldr	r2, [sp, #12]
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	42ab      	cmp	r3, r5
 8002dbc:	dcf2      	bgt.n	8002da4 <_printf_i+0x1e8>
 8002dbe:	e7eb      	b.n	8002d98 <_printf_i+0x1dc>
 8002dc0:	2500      	movs	r5, #0
 8002dc2:	f104 0919 	add.w	r9, r4, #25
 8002dc6:	e7f5      	b.n	8002db4 <_printf_i+0x1f8>
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1ac      	bne.n	8002d26 <_printf_i+0x16a>
 8002dcc:	7803      	ldrb	r3, [r0, #0]
 8002dce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dd6:	e76c      	b.n	8002cb2 <_printf_i+0xf6>
 8002dd8:	0800348d 	.word	0x0800348d
 8002ddc:	0800349e 	.word	0x0800349e

08002de0 <_sbrk_r>:
 8002de0:	b538      	push	{r3, r4, r5, lr}
 8002de2:	2300      	movs	r3, #0
 8002de4:	4c05      	ldr	r4, [pc, #20]	; (8002dfc <_sbrk_r+0x1c>)
 8002de6:	4605      	mov	r5, r0
 8002de8:	4608      	mov	r0, r1
 8002dea:	6023      	str	r3, [r4, #0]
 8002dec:	f7fd fd54 	bl	8000898 <_sbrk>
 8002df0:	1c43      	adds	r3, r0, #1
 8002df2:	d102      	bne.n	8002dfa <_sbrk_r+0x1a>
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	b103      	cbz	r3, 8002dfa <_sbrk_r+0x1a>
 8002df8:	602b      	str	r3, [r5, #0]
 8002dfa:	bd38      	pop	{r3, r4, r5, pc}
 8002dfc:	20000178 	.word	0x20000178

08002e00 <__sread>:
 8002e00:	b510      	push	{r4, lr}
 8002e02:	460c      	mov	r4, r1
 8002e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e08:	f000 faa2 	bl	8003350 <_read_r>
 8002e0c:	2800      	cmp	r0, #0
 8002e0e:	bfab      	itete	ge
 8002e10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e12:	89a3      	ldrhlt	r3, [r4, #12]
 8002e14:	181b      	addge	r3, r3, r0
 8002e16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e1a:	bfac      	ite	ge
 8002e1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e1e:	81a3      	strhlt	r3, [r4, #12]
 8002e20:	bd10      	pop	{r4, pc}

08002e22 <__swrite>:
 8002e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e26:	461f      	mov	r7, r3
 8002e28:	898b      	ldrh	r3, [r1, #12]
 8002e2a:	4605      	mov	r5, r0
 8002e2c:	05db      	lsls	r3, r3, #23
 8002e2e:	460c      	mov	r4, r1
 8002e30:	4616      	mov	r6, r2
 8002e32:	d505      	bpl.n	8002e40 <__swrite+0x1e>
 8002e34:	2302      	movs	r3, #2
 8002e36:	2200      	movs	r2, #0
 8002e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e3c:	f000 f9b6 	bl	80031ac <_lseek_r>
 8002e40:	89a3      	ldrh	r3, [r4, #12]
 8002e42:	4632      	mov	r2, r6
 8002e44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e48:	81a3      	strh	r3, [r4, #12]
 8002e4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e4e:	463b      	mov	r3, r7
 8002e50:	4628      	mov	r0, r5
 8002e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e56:	f000 b869 	b.w	8002f2c <_write_r>

08002e5a <__sseek>:
 8002e5a:	b510      	push	{r4, lr}
 8002e5c:	460c      	mov	r4, r1
 8002e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e62:	f000 f9a3 	bl	80031ac <_lseek_r>
 8002e66:	1c43      	adds	r3, r0, #1
 8002e68:	89a3      	ldrh	r3, [r4, #12]
 8002e6a:	bf15      	itete	ne
 8002e6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8002e6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002e72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002e76:	81a3      	strheq	r3, [r4, #12]
 8002e78:	bf18      	it	ne
 8002e7a:	81a3      	strhne	r3, [r4, #12]
 8002e7c:	bd10      	pop	{r4, pc}

08002e7e <__sclose>:
 8002e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e82:	f000 b8d3 	b.w	800302c <_close_r>
	...

08002e88 <__swbuf_r>:
 8002e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8a:	460e      	mov	r6, r1
 8002e8c:	4614      	mov	r4, r2
 8002e8e:	4605      	mov	r5, r0
 8002e90:	b118      	cbz	r0, 8002e9a <__swbuf_r+0x12>
 8002e92:	6983      	ldr	r3, [r0, #24]
 8002e94:	b90b      	cbnz	r3, 8002e9a <__swbuf_r+0x12>
 8002e96:	f7ff fbf9 	bl	800268c <__sinit>
 8002e9a:	4b21      	ldr	r3, [pc, #132]	; (8002f20 <__swbuf_r+0x98>)
 8002e9c:	429c      	cmp	r4, r3
 8002e9e:	d12a      	bne.n	8002ef6 <__swbuf_r+0x6e>
 8002ea0:	686c      	ldr	r4, [r5, #4]
 8002ea2:	69a3      	ldr	r3, [r4, #24]
 8002ea4:	60a3      	str	r3, [r4, #8]
 8002ea6:	89a3      	ldrh	r3, [r4, #12]
 8002ea8:	071a      	lsls	r2, r3, #28
 8002eaa:	d52e      	bpl.n	8002f0a <__swbuf_r+0x82>
 8002eac:	6923      	ldr	r3, [r4, #16]
 8002eae:	b363      	cbz	r3, 8002f0a <__swbuf_r+0x82>
 8002eb0:	6923      	ldr	r3, [r4, #16]
 8002eb2:	6820      	ldr	r0, [r4, #0]
 8002eb4:	b2f6      	uxtb	r6, r6
 8002eb6:	1ac0      	subs	r0, r0, r3
 8002eb8:	6963      	ldr	r3, [r4, #20]
 8002eba:	4637      	mov	r7, r6
 8002ebc:	4283      	cmp	r3, r0
 8002ebe:	dc04      	bgt.n	8002eca <__swbuf_r+0x42>
 8002ec0:	4621      	mov	r1, r4
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	f000 f948 	bl	8003158 <_fflush_r>
 8002ec8:	bb28      	cbnz	r0, 8002f16 <__swbuf_r+0x8e>
 8002eca:	68a3      	ldr	r3, [r4, #8]
 8002ecc:	3001      	adds	r0, #1
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	60a3      	str	r3, [r4, #8]
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	6022      	str	r2, [r4, #0]
 8002ed8:	701e      	strb	r6, [r3, #0]
 8002eda:	6963      	ldr	r3, [r4, #20]
 8002edc:	4283      	cmp	r3, r0
 8002ede:	d004      	beq.n	8002eea <__swbuf_r+0x62>
 8002ee0:	89a3      	ldrh	r3, [r4, #12]
 8002ee2:	07db      	lsls	r3, r3, #31
 8002ee4:	d519      	bpl.n	8002f1a <__swbuf_r+0x92>
 8002ee6:	2e0a      	cmp	r6, #10
 8002ee8:	d117      	bne.n	8002f1a <__swbuf_r+0x92>
 8002eea:	4621      	mov	r1, r4
 8002eec:	4628      	mov	r0, r5
 8002eee:	f000 f933 	bl	8003158 <_fflush_r>
 8002ef2:	b190      	cbz	r0, 8002f1a <__swbuf_r+0x92>
 8002ef4:	e00f      	b.n	8002f16 <__swbuf_r+0x8e>
 8002ef6:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <__swbuf_r+0x9c>)
 8002ef8:	429c      	cmp	r4, r3
 8002efa:	d101      	bne.n	8002f00 <__swbuf_r+0x78>
 8002efc:	68ac      	ldr	r4, [r5, #8]
 8002efe:	e7d0      	b.n	8002ea2 <__swbuf_r+0x1a>
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <__swbuf_r+0xa0>)
 8002f02:	429c      	cmp	r4, r3
 8002f04:	bf08      	it	eq
 8002f06:	68ec      	ldreq	r4, [r5, #12]
 8002f08:	e7cb      	b.n	8002ea2 <__swbuf_r+0x1a>
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	4628      	mov	r0, r5
 8002f0e:	f000 f81f 	bl	8002f50 <__swsetup_r>
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d0cc      	beq.n	8002eb0 <__swbuf_r+0x28>
 8002f16:	f04f 37ff 	mov.w	r7, #4294967295
 8002f1a:	4638      	mov	r0, r7
 8002f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	0800343c 	.word	0x0800343c
 8002f24:	0800345c 	.word	0x0800345c
 8002f28:	0800341c 	.word	0x0800341c

08002f2c <_write_r>:
 8002f2c:	b538      	push	{r3, r4, r5, lr}
 8002f2e:	4605      	mov	r5, r0
 8002f30:	4608      	mov	r0, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	2200      	movs	r2, #0
 8002f36:	4c05      	ldr	r4, [pc, #20]	; (8002f4c <_write_r+0x20>)
 8002f38:	6022      	str	r2, [r4, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f7fd fc5f 	bl	80007fe <_write>
 8002f40:	1c43      	adds	r3, r0, #1
 8002f42:	d102      	bne.n	8002f4a <_write_r+0x1e>
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	b103      	cbz	r3, 8002f4a <_write_r+0x1e>
 8002f48:	602b      	str	r3, [r5, #0]
 8002f4a:	bd38      	pop	{r3, r4, r5, pc}
 8002f4c:	20000178 	.word	0x20000178

08002f50 <__swsetup_r>:
 8002f50:	4b32      	ldr	r3, [pc, #200]	; (800301c <__swsetup_r+0xcc>)
 8002f52:	b570      	push	{r4, r5, r6, lr}
 8002f54:	681d      	ldr	r5, [r3, #0]
 8002f56:	4606      	mov	r6, r0
 8002f58:	460c      	mov	r4, r1
 8002f5a:	b125      	cbz	r5, 8002f66 <__swsetup_r+0x16>
 8002f5c:	69ab      	ldr	r3, [r5, #24]
 8002f5e:	b913      	cbnz	r3, 8002f66 <__swsetup_r+0x16>
 8002f60:	4628      	mov	r0, r5
 8002f62:	f7ff fb93 	bl	800268c <__sinit>
 8002f66:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <__swsetup_r+0xd0>)
 8002f68:	429c      	cmp	r4, r3
 8002f6a:	d10f      	bne.n	8002f8c <__swsetup_r+0x3c>
 8002f6c:	686c      	ldr	r4, [r5, #4]
 8002f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	0715      	lsls	r5, r2, #28
 8002f76:	d42c      	bmi.n	8002fd2 <__swsetup_r+0x82>
 8002f78:	06d0      	lsls	r0, r2, #27
 8002f7a:	d411      	bmi.n	8002fa0 <__swsetup_r+0x50>
 8002f7c:	2209      	movs	r2, #9
 8002f7e:	6032      	str	r2, [r6, #0]
 8002f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f84:	81a3      	strh	r3, [r4, #12]
 8002f86:	f04f 30ff 	mov.w	r0, #4294967295
 8002f8a:	e03e      	b.n	800300a <__swsetup_r+0xba>
 8002f8c:	4b25      	ldr	r3, [pc, #148]	; (8003024 <__swsetup_r+0xd4>)
 8002f8e:	429c      	cmp	r4, r3
 8002f90:	d101      	bne.n	8002f96 <__swsetup_r+0x46>
 8002f92:	68ac      	ldr	r4, [r5, #8]
 8002f94:	e7eb      	b.n	8002f6e <__swsetup_r+0x1e>
 8002f96:	4b24      	ldr	r3, [pc, #144]	; (8003028 <__swsetup_r+0xd8>)
 8002f98:	429c      	cmp	r4, r3
 8002f9a:	bf08      	it	eq
 8002f9c:	68ec      	ldreq	r4, [r5, #12]
 8002f9e:	e7e6      	b.n	8002f6e <__swsetup_r+0x1e>
 8002fa0:	0751      	lsls	r1, r2, #29
 8002fa2:	d512      	bpl.n	8002fca <__swsetup_r+0x7a>
 8002fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002fa6:	b141      	cbz	r1, 8002fba <__swsetup_r+0x6a>
 8002fa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002fac:	4299      	cmp	r1, r3
 8002fae:	d002      	beq.n	8002fb6 <__swsetup_r+0x66>
 8002fb0:	4630      	mov	r0, r6
 8002fb2:	f000 f981 	bl	80032b8 <_free_r>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	6363      	str	r3, [r4, #52]	; 0x34
 8002fba:	89a3      	ldrh	r3, [r4, #12]
 8002fbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002fc0:	81a3      	strh	r3, [r4, #12]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	6063      	str	r3, [r4, #4]
 8002fc6:	6923      	ldr	r3, [r4, #16]
 8002fc8:	6023      	str	r3, [r4, #0]
 8002fca:	89a3      	ldrh	r3, [r4, #12]
 8002fcc:	f043 0308 	orr.w	r3, r3, #8
 8002fd0:	81a3      	strh	r3, [r4, #12]
 8002fd2:	6923      	ldr	r3, [r4, #16]
 8002fd4:	b94b      	cbnz	r3, 8002fea <__swsetup_r+0x9a>
 8002fd6:	89a3      	ldrh	r3, [r4, #12]
 8002fd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fe0:	d003      	beq.n	8002fea <__swsetup_r+0x9a>
 8002fe2:	4621      	mov	r1, r4
 8002fe4:	4630      	mov	r0, r6
 8002fe6:	f000 f917 	bl	8003218 <__smakebuf_r>
 8002fea:	89a2      	ldrh	r2, [r4, #12]
 8002fec:	f012 0301 	ands.w	r3, r2, #1
 8002ff0:	d00c      	beq.n	800300c <__swsetup_r+0xbc>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	60a3      	str	r3, [r4, #8]
 8002ff6:	6963      	ldr	r3, [r4, #20]
 8002ff8:	425b      	negs	r3, r3
 8002ffa:	61a3      	str	r3, [r4, #24]
 8002ffc:	6923      	ldr	r3, [r4, #16]
 8002ffe:	b953      	cbnz	r3, 8003016 <__swsetup_r+0xc6>
 8003000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003004:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003008:	d1ba      	bne.n	8002f80 <__swsetup_r+0x30>
 800300a:	bd70      	pop	{r4, r5, r6, pc}
 800300c:	0792      	lsls	r2, r2, #30
 800300e:	bf58      	it	pl
 8003010:	6963      	ldrpl	r3, [r4, #20]
 8003012:	60a3      	str	r3, [r4, #8]
 8003014:	e7f2      	b.n	8002ffc <__swsetup_r+0xac>
 8003016:	2000      	movs	r0, #0
 8003018:	e7f7      	b.n	800300a <__swsetup_r+0xba>
 800301a:	bf00      	nop
 800301c:	20000018 	.word	0x20000018
 8003020:	0800343c 	.word	0x0800343c
 8003024:	0800345c 	.word	0x0800345c
 8003028:	0800341c 	.word	0x0800341c

0800302c <_close_r>:
 800302c:	b538      	push	{r3, r4, r5, lr}
 800302e:	2300      	movs	r3, #0
 8003030:	4c05      	ldr	r4, [pc, #20]	; (8003048 <_close_r+0x1c>)
 8003032:	4605      	mov	r5, r0
 8003034:	4608      	mov	r0, r1
 8003036:	6023      	str	r3, [r4, #0]
 8003038:	f7fd fbfd 	bl	8000836 <_close>
 800303c:	1c43      	adds	r3, r0, #1
 800303e:	d102      	bne.n	8003046 <_close_r+0x1a>
 8003040:	6823      	ldr	r3, [r4, #0]
 8003042:	b103      	cbz	r3, 8003046 <_close_r+0x1a>
 8003044:	602b      	str	r3, [r5, #0]
 8003046:	bd38      	pop	{r3, r4, r5, pc}
 8003048:	20000178 	.word	0x20000178

0800304c <__sflush_r>:
 800304c:	898a      	ldrh	r2, [r1, #12]
 800304e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003052:	4605      	mov	r5, r0
 8003054:	0710      	lsls	r0, r2, #28
 8003056:	460c      	mov	r4, r1
 8003058:	d458      	bmi.n	800310c <__sflush_r+0xc0>
 800305a:	684b      	ldr	r3, [r1, #4]
 800305c:	2b00      	cmp	r3, #0
 800305e:	dc05      	bgt.n	800306c <__sflush_r+0x20>
 8003060:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	dc02      	bgt.n	800306c <__sflush_r+0x20>
 8003066:	2000      	movs	r0, #0
 8003068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800306c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800306e:	2e00      	cmp	r6, #0
 8003070:	d0f9      	beq.n	8003066 <__sflush_r+0x1a>
 8003072:	2300      	movs	r3, #0
 8003074:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003078:	682f      	ldr	r7, [r5, #0]
 800307a:	6a21      	ldr	r1, [r4, #32]
 800307c:	602b      	str	r3, [r5, #0]
 800307e:	d032      	beq.n	80030e6 <__sflush_r+0x9a>
 8003080:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003082:	89a3      	ldrh	r3, [r4, #12]
 8003084:	075a      	lsls	r2, r3, #29
 8003086:	d505      	bpl.n	8003094 <__sflush_r+0x48>
 8003088:	6863      	ldr	r3, [r4, #4]
 800308a:	1ac0      	subs	r0, r0, r3
 800308c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800308e:	b10b      	cbz	r3, 8003094 <__sflush_r+0x48>
 8003090:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003092:	1ac0      	subs	r0, r0, r3
 8003094:	2300      	movs	r3, #0
 8003096:	4602      	mov	r2, r0
 8003098:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800309a:	6a21      	ldr	r1, [r4, #32]
 800309c:	4628      	mov	r0, r5
 800309e:	47b0      	blx	r6
 80030a0:	1c43      	adds	r3, r0, #1
 80030a2:	89a3      	ldrh	r3, [r4, #12]
 80030a4:	d106      	bne.n	80030b4 <__sflush_r+0x68>
 80030a6:	6829      	ldr	r1, [r5, #0]
 80030a8:	291d      	cmp	r1, #29
 80030aa:	d848      	bhi.n	800313e <__sflush_r+0xf2>
 80030ac:	4a29      	ldr	r2, [pc, #164]	; (8003154 <__sflush_r+0x108>)
 80030ae:	40ca      	lsrs	r2, r1
 80030b0:	07d6      	lsls	r6, r2, #31
 80030b2:	d544      	bpl.n	800313e <__sflush_r+0xf2>
 80030b4:	2200      	movs	r2, #0
 80030b6:	6062      	str	r2, [r4, #4]
 80030b8:	6922      	ldr	r2, [r4, #16]
 80030ba:	04d9      	lsls	r1, r3, #19
 80030bc:	6022      	str	r2, [r4, #0]
 80030be:	d504      	bpl.n	80030ca <__sflush_r+0x7e>
 80030c0:	1c42      	adds	r2, r0, #1
 80030c2:	d101      	bne.n	80030c8 <__sflush_r+0x7c>
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	b903      	cbnz	r3, 80030ca <__sflush_r+0x7e>
 80030c8:	6560      	str	r0, [r4, #84]	; 0x54
 80030ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80030cc:	602f      	str	r7, [r5, #0]
 80030ce:	2900      	cmp	r1, #0
 80030d0:	d0c9      	beq.n	8003066 <__sflush_r+0x1a>
 80030d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80030d6:	4299      	cmp	r1, r3
 80030d8:	d002      	beq.n	80030e0 <__sflush_r+0x94>
 80030da:	4628      	mov	r0, r5
 80030dc:	f000 f8ec 	bl	80032b8 <_free_r>
 80030e0:	2000      	movs	r0, #0
 80030e2:	6360      	str	r0, [r4, #52]	; 0x34
 80030e4:	e7c0      	b.n	8003068 <__sflush_r+0x1c>
 80030e6:	2301      	movs	r3, #1
 80030e8:	4628      	mov	r0, r5
 80030ea:	47b0      	blx	r6
 80030ec:	1c41      	adds	r1, r0, #1
 80030ee:	d1c8      	bne.n	8003082 <__sflush_r+0x36>
 80030f0:	682b      	ldr	r3, [r5, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0c5      	beq.n	8003082 <__sflush_r+0x36>
 80030f6:	2b1d      	cmp	r3, #29
 80030f8:	d001      	beq.n	80030fe <__sflush_r+0xb2>
 80030fa:	2b16      	cmp	r3, #22
 80030fc:	d101      	bne.n	8003102 <__sflush_r+0xb6>
 80030fe:	602f      	str	r7, [r5, #0]
 8003100:	e7b1      	b.n	8003066 <__sflush_r+0x1a>
 8003102:	89a3      	ldrh	r3, [r4, #12]
 8003104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003108:	81a3      	strh	r3, [r4, #12]
 800310a:	e7ad      	b.n	8003068 <__sflush_r+0x1c>
 800310c:	690f      	ldr	r7, [r1, #16]
 800310e:	2f00      	cmp	r7, #0
 8003110:	d0a9      	beq.n	8003066 <__sflush_r+0x1a>
 8003112:	0793      	lsls	r3, r2, #30
 8003114:	bf18      	it	ne
 8003116:	2300      	movne	r3, #0
 8003118:	680e      	ldr	r6, [r1, #0]
 800311a:	bf08      	it	eq
 800311c:	694b      	ldreq	r3, [r1, #20]
 800311e:	eba6 0807 	sub.w	r8, r6, r7
 8003122:	600f      	str	r7, [r1, #0]
 8003124:	608b      	str	r3, [r1, #8]
 8003126:	f1b8 0f00 	cmp.w	r8, #0
 800312a:	dd9c      	ble.n	8003066 <__sflush_r+0x1a>
 800312c:	4643      	mov	r3, r8
 800312e:	463a      	mov	r2, r7
 8003130:	6a21      	ldr	r1, [r4, #32]
 8003132:	4628      	mov	r0, r5
 8003134:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003136:	47b0      	blx	r6
 8003138:	2800      	cmp	r0, #0
 800313a:	dc06      	bgt.n	800314a <__sflush_r+0xfe>
 800313c:	89a3      	ldrh	r3, [r4, #12]
 800313e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003142:	81a3      	strh	r3, [r4, #12]
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
 8003148:	e78e      	b.n	8003068 <__sflush_r+0x1c>
 800314a:	4407      	add	r7, r0
 800314c:	eba8 0800 	sub.w	r8, r8, r0
 8003150:	e7e9      	b.n	8003126 <__sflush_r+0xda>
 8003152:	bf00      	nop
 8003154:	20400001 	.word	0x20400001

08003158 <_fflush_r>:
 8003158:	b538      	push	{r3, r4, r5, lr}
 800315a:	690b      	ldr	r3, [r1, #16]
 800315c:	4605      	mov	r5, r0
 800315e:	460c      	mov	r4, r1
 8003160:	b1db      	cbz	r3, 800319a <_fflush_r+0x42>
 8003162:	b118      	cbz	r0, 800316c <_fflush_r+0x14>
 8003164:	6983      	ldr	r3, [r0, #24]
 8003166:	b90b      	cbnz	r3, 800316c <_fflush_r+0x14>
 8003168:	f7ff fa90 	bl	800268c <__sinit>
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <_fflush_r+0x48>)
 800316e:	429c      	cmp	r4, r3
 8003170:	d109      	bne.n	8003186 <_fflush_r+0x2e>
 8003172:	686c      	ldr	r4, [r5, #4]
 8003174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003178:	b17b      	cbz	r3, 800319a <_fflush_r+0x42>
 800317a:	4621      	mov	r1, r4
 800317c:	4628      	mov	r0, r5
 800317e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003182:	f7ff bf63 	b.w	800304c <__sflush_r>
 8003186:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <_fflush_r+0x4c>)
 8003188:	429c      	cmp	r4, r3
 800318a:	d101      	bne.n	8003190 <_fflush_r+0x38>
 800318c:	68ac      	ldr	r4, [r5, #8]
 800318e:	e7f1      	b.n	8003174 <_fflush_r+0x1c>
 8003190:	4b05      	ldr	r3, [pc, #20]	; (80031a8 <_fflush_r+0x50>)
 8003192:	429c      	cmp	r4, r3
 8003194:	bf08      	it	eq
 8003196:	68ec      	ldreq	r4, [r5, #12]
 8003198:	e7ec      	b.n	8003174 <_fflush_r+0x1c>
 800319a:	2000      	movs	r0, #0
 800319c:	bd38      	pop	{r3, r4, r5, pc}
 800319e:	bf00      	nop
 80031a0:	0800343c 	.word	0x0800343c
 80031a4:	0800345c 	.word	0x0800345c
 80031a8:	0800341c 	.word	0x0800341c

080031ac <_lseek_r>:
 80031ac:	b538      	push	{r3, r4, r5, lr}
 80031ae:	4605      	mov	r5, r0
 80031b0:	4608      	mov	r0, r1
 80031b2:	4611      	mov	r1, r2
 80031b4:	2200      	movs	r2, #0
 80031b6:	4c05      	ldr	r4, [pc, #20]	; (80031cc <_lseek_r+0x20>)
 80031b8:	6022      	str	r2, [r4, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	f7fd fb5f 	bl	800087e <_lseek>
 80031c0:	1c43      	adds	r3, r0, #1
 80031c2:	d102      	bne.n	80031ca <_lseek_r+0x1e>
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	b103      	cbz	r3, 80031ca <_lseek_r+0x1e>
 80031c8:	602b      	str	r3, [r5, #0]
 80031ca:	bd38      	pop	{r3, r4, r5, pc}
 80031cc:	20000178 	.word	0x20000178

080031d0 <__swhatbuf_r>:
 80031d0:	b570      	push	{r4, r5, r6, lr}
 80031d2:	460e      	mov	r6, r1
 80031d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031d8:	b096      	sub	sp, #88	; 0x58
 80031da:	2900      	cmp	r1, #0
 80031dc:	4614      	mov	r4, r2
 80031de:	461d      	mov	r5, r3
 80031e0:	da07      	bge.n	80031f2 <__swhatbuf_r+0x22>
 80031e2:	2300      	movs	r3, #0
 80031e4:	602b      	str	r3, [r5, #0]
 80031e6:	89b3      	ldrh	r3, [r6, #12]
 80031e8:	061a      	lsls	r2, r3, #24
 80031ea:	d410      	bmi.n	800320e <__swhatbuf_r+0x3e>
 80031ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031f0:	e00e      	b.n	8003210 <__swhatbuf_r+0x40>
 80031f2:	466a      	mov	r2, sp
 80031f4:	f000 f8be 	bl	8003374 <_fstat_r>
 80031f8:	2800      	cmp	r0, #0
 80031fa:	dbf2      	blt.n	80031e2 <__swhatbuf_r+0x12>
 80031fc:	9a01      	ldr	r2, [sp, #4]
 80031fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003202:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003206:	425a      	negs	r2, r3
 8003208:	415a      	adcs	r2, r3
 800320a:	602a      	str	r2, [r5, #0]
 800320c:	e7ee      	b.n	80031ec <__swhatbuf_r+0x1c>
 800320e:	2340      	movs	r3, #64	; 0x40
 8003210:	2000      	movs	r0, #0
 8003212:	6023      	str	r3, [r4, #0]
 8003214:	b016      	add	sp, #88	; 0x58
 8003216:	bd70      	pop	{r4, r5, r6, pc}

08003218 <__smakebuf_r>:
 8003218:	898b      	ldrh	r3, [r1, #12]
 800321a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800321c:	079d      	lsls	r5, r3, #30
 800321e:	4606      	mov	r6, r0
 8003220:	460c      	mov	r4, r1
 8003222:	d507      	bpl.n	8003234 <__smakebuf_r+0x1c>
 8003224:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	6123      	str	r3, [r4, #16]
 800322c:	2301      	movs	r3, #1
 800322e:	6163      	str	r3, [r4, #20]
 8003230:	b002      	add	sp, #8
 8003232:	bd70      	pop	{r4, r5, r6, pc}
 8003234:	ab01      	add	r3, sp, #4
 8003236:	466a      	mov	r2, sp
 8003238:	f7ff ffca 	bl	80031d0 <__swhatbuf_r>
 800323c:	9900      	ldr	r1, [sp, #0]
 800323e:	4605      	mov	r5, r0
 8003240:	4630      	mov	r0, r6
 8003242:	f7ff faad 	bl	80027a0 <_malloc_r>
 8003246:	b948      	cbnz	r0, 800325c <__smakebuf_r+0x44>
 8003248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800324c:	059a      	lsls	r2, r3, #22
 800324e:	d4ef      	bmi.n	8003230 <__smakebuf_r+0x18>
 8003250:	f023 0303 	bic.w	r3, r3, #3
 8003254:	f043 0302 	orr.w	r3, r3, #2
 8003258:	81a3      	strh	r3, [r4, #12]
 800325a:	e7e3      	b.n	8003224 <__smakebuf_r+0xc>
 800325c:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <__smakebuf_r+0x7c>)
 800325e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003260:	89a3      	ldrh	r3, [r4, #12]
 8003262:	6020      	str	r0, [r4, #0]
 8003264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003268:	81a3      	strh	r3, [r4, #12]
 800326a:	9b00      	ldr	r3, [sp, #0]
 800326c:	6120      	str	r0, [r4, #16]
 800326e:	6163      	str	r3, [r4, #20]
 8003270:	9b01      	ldr	r3, [sp, #4]
 8003272:	b15b      	cbz	r3, 800328c <__smakebuf_r+0x74>
 8003274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003278:	4630      	mov	r0, r6
 800327a:	f000 f88d 	bl	8003398 <_isatty_r>
 800327e:	b128      	cbz	r0, 800328c <__smakebuf_r+0x74>
 8003280:	89a3      	ldrh	r3, [r4, #12]
 8003282:	f023 0303 	bic.w	r3, r3, #3
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	81a3      	strh	r3, [r4, #12]
 800328c:	89a3      	ldrh	r3, [r4, #12]
 800328e:	431d      	orrs	r5, r3
 8003290:	81a5      	strh	r5, [r4, #12]
 8003292:	e7cd      	b.n	8003230 <__smakebuf_r+0x18>
 8003294:	08002655 	.word	0x08002655

08003298 <memchr>:
 8003298:	b510      	push	{r4, lr}
 800329a:	b2c9      	uxtb	r1, r1
 800329c:	4402      	add	r2, r0
 800329e:	4290      	cmp	r0, r2
 80032a0:	4603      	mov	r3, r0
 80032a2:	d101      	bne.n	80032a8 <memchr+0x10>
 80032a4:	2300      	movs	r3, #0
 80032a6:	e003      	b.n	80032b0 <memchr+0x18>
 80032a8:	781c      	ldrb	r4, [r3, #0]
 80032aa:	3001      	adds	r0, #1
 80032ac:	428c      	cmp	r4, r1
 80032ae:	d1f6      	bne.n	800329e <memchr+0x6>
 80032b0:	4618      	mov	r0, r3
 80032b2:	bd10      	pop	{r4, pc}

080032b4 <__malloc_lock>:
 80032b4:	4770      	bx	lr

080032b6 <__malloc_unlock>:
 80032b6:	4770      	bx	lr

080032b8 <_free_r>:
 80032b8:	b538      	push	{r3, r4, r5, lr}
 80032ba:	4605      	mov	r5, r0
 80032bc:	2900      	cmp	r1, #0
 80032be:	d043      	beq.n	8003348 <_free_r+0x90>
 80032c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032c4:	1f0c      	subs	r4, r1, #4
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	bfb8      	it	lt
 80032ca:	18e4      	addlt	r4, r4, r3
 80032cc:	f7ff fff2 	bl	80032b4 <__malloc_lock>
 80032d0:	4a1e      	ldr	r2, [pc, #120]	; (800334c <_free_r+0x94>)
 80032d2:	6813      	ldr	r3, [r2, #0]
 80032d4:	4610      	mov	r0, r2
 80032d6:	b933      	cbnz	r3, 80032e6 <_free_r+0x2e>
 80032d8:	6063      	str	r3, [r4, #4]
 80032da:	6014      	str	r4, [r2, #0]
 80032dc:	4628      	mov	r0, r5
 80032de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032e2:	f7ff bfe8 	b.w	80032b6 <__malloc_unlock>
 80032e6:	42a3      	cmp	r3, r4
 80032e8:	d90b      	bls.n	8003302 <_free_r+0x4a>
 80032ea:	6821      	ldr	r1, [r4, #0]
 80032ec:	1862      	adds	r2, r4, r1
 80032ee:	4293      	cmp	r3, r2
 80032f0:	bf01      	itttt	eq
 80032f2:	681a      	ldreq	r2, [r3, #0]
 80032f4:	685b      	ldreq	r3, [r3, #4]
 80032f6:	1852      	addeq	r2, r2, r1
 80032f8:	6022      	streq	r2, [r4, #0]
 80032fa:	6063      	str	r3, [r4, #4]
 80032fc:	6004      	str	r4, [r0, #0]
 80032fe:	e7ed      	b.n	80032dc <_free_r+0x24>
 8003300:	4613      	mov	r3, r2
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	b10a      	cbz	r2, 800330a <_free_r+0x52>
 8003306:	42a2      	cmp	r2, r4
 8003308:	d9fa      	bls.n	8003300 <_free_r+0x48>
 800330a:	6819      	ldr	r1, [r3, #0]
 800330c:	1858      	adds	r0, r3, r1
 800330e:	42a0      	cmp	r0, r4
 8003310:	d10b      	bne.n	800332a <_free_r+0x72>
 8003312:	6820      	ldr	r0, [r4, #0]
 8003314:	4401      	add	r1, r0
 8003316:	1858      	adds	r0, r3, r1
 8003318:	4282      	cmp	r2, r0
 800331a:	6019      	str	r1, [r3, #0]
 800331c:	d1de      	bne.n	80032dc <_free_r+0x24>
 800331e:	6810      	ldr	r0, [r2, #0]
 8003320:	6852      	ldr	r2, [r2, #4]
 8003322:	4401      	add	r1, r0
 8003324:	6019      	str	r1, [r3, #0]
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	e7d8      	b.n	80032dc <_free_r+0x24>
 800332a:	d902      	bls.n	8003332 <_free_r+0x7a>
 800332c:	230c      	movs	r3, #12
 800332e:	602b      	str	r3, [r5, #0]
 8003330:	e7d4      	b.n	80032dc <_free_r+0x24>
 8003332:	6820      	ldr	r0, [r4, #0]
 8003334:	1821      	adds	r1, r4, r0
 8003336:	428a      	cmp	r2, r1
 8003338:	bf01      	itttt	eq
 800333a:	6811      	ldreq	r1, [r2, #0]
 800333c:	6852      	ldreq	r2, [r2, #4]
 800333e:	1809      	addeq	r1, r1, r0
 8003340:	6021      	streq	r1, [r4, #0]
 8003342:	6062      	str	r2, [r4, #4]
 8003344:	605c      	str	r4, [r3, #4]
 8003346:	e7c9      	b.n	80032dc <_free_r+0x24>
 8003348:	bd38      	pop	{r3, r4, r5, pc}
 800334a:	bf00      	nop
 800334c:	200000a0 	.word	0x200000a0

08003350 <_read_r>:
 8003350:	b538      	push	{r3, r4, r5, lr}
 8003352:	4605      	mov	r5, r0
 8003354:	4608      	mov	r0, r1
 8003356:	4611      	mov	r1, r2
 8003358:	2200      	movs	r2, #0
 800335a:	4c05      	ldr	r4, [pc, #20]	; (8003370 <_read_r+0x20>)
 800335c:	6022      	str	r2, [r4, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	f7fd fa30 	bl	80007c4 <_read>
 8003364:	1c43      	adds	r3, r0, #1
 8003366:	d102      	bne.n	800336e <_read_r+0x1e>
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	b103      	cbz	r3, 800336e <_read_r+0x1e>
 800336c:	602b      	str	r3, [r5, #0]
 800336e:	bd38      	pop	{r3, r4, r5, pc}
 8003370:	20000178 	.word	0x20000178

08003374 <_fstat_r>:
 8003374:	b538      	push	{r3, r4, r5, lr}
 8003376:	2300      	movs	r3, #0
 8003378:	4c06      	ldr	r4, [pc, #24]	; (8003394 <_fstat_r+0x20>)
 800337a:	4605      	mov	r5, r0
 800337c:	4608      	mov	r0, r1
 800337e:	4611      	mov	r1, r2
 8003380:	6023      	str	r3, [r4, #0]
 8003382:	f7fd fa63 	bl	800084c <_fstat>
 8003386:	1c43      	adds	r3, r0, #1
 8003388:	d102      	bne.n	8003390 <_fstat_r+0x1c>
 800338a:	6823      	ldr	r3, [r4, #0]
 800338c:	b103      	cbz	r3, 8003390 <_fstat_r+0x1c>
 800338e:	602b      	str	r3, [r5, #0]
 8003390:	bd38      	pop	{r3, r4, r5, pc}
 8003392:	bf00      	nop
 8003394:	20000178 	.word	0x20000178

08003398 <_isatty_r>:
 8003398:	b538      	push	{r3, r4, r5, lr}
 800339a:	2300      	movs	r3, #0
 800339c:	4c05      	ldr	r4, [pc, #20]	; (80033b4 <_isatty_r+0x1c>)
 800339e:	4605      	mov	r5, r0
 80033a0:	4608      	mov	r0, r1
 80033a2:	6023      	str	r3, [r4, #0]
 80033a4:	f7fd fa61 	bl	800086a <_isatty>
 80033a8:	1c43      	adds	r3, r0, #1
 80033aa:	d102      	bne.n	80033b2 <_isatty_r+0x1a>
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	b103      	cbz	r3, 80033b2 <_isatty_r+0x1a>
 80033b0:	602b      	str	r3, [r5, #0]
 80033b2:	bd38      	pop	{r3, r4, r5, pc}
 80033b4:	20000178 	.word	0x20000178

080033b8 <_init>:
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ba:	bf00      	nop
 80033bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033be:	bc08      	pop	{r3}
 80033c0:	469e      	mov	lr, r3
 80033c2:	4770      	bx	lr

080033c4 <_fini>:
 80033c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c6:	bf00      	nop
 80033c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ca:	bc08      	pop	{r3}
 80033cc:	469e      	mov	lr, r3
 80033ce:	4770      	bx	lr
